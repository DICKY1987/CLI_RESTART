{
  "metadata": {
    "specification_name": "Tool-Agnostic Multi-Agent Code Modification Pipeline",
    "version": "1.0.0",
    "created_date": "2025-09-28",
    "description": "Complete implementation specification for 400-atom deterministic code modification pipeline",
    "total_atoms": 400,
    "total_phases": 6,
    "total_roles": 13,
    "implementation_complexity": "enterprise",
    "estimated_implementation_time": "8-12 weeks",
    "codex_compatibility": "full"
  },
  "pipeline_overview": {
    "core_principle": "Role-Based Tool Assignment with Fallback Chains",
    "primary_deliverable": "Error-Free Modified Codebase",
    "deterministic_atoms": 245,
    "ai_decision_atoms": 155,
    "convergence_points": [
      "ModDoc generation (atom_064)",
      "VS Code validation (atom_166)",
      "Integration branch (atom_192)"
    ],
    "cost_optimization": "Primary tools selected by complexity, automatic fallback on quota limits"
  },
  "phases": {
    "phase_0": {
      "name": "ENTRY POINT CONVERGENCE & TASK CLASSIFICATION",
      "atoms": "001-030",
      "duration": "30 atoms",
      "description": "Unified entry point processing, complexity assessment, and ModDoc initialization",
      "sections": {
        "entry_point_processing": {
          "atoms": "001-010",
          "type": "AI_MAKES_DECISIONS",
          "atoms_detail": {
            "atom_001": {
              "name": "detect_entry_point_type",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["user_request", "file_patterns", "command_line_args"],
              "outputs": ["entry_point_type"],
              "implementation": {
                "function": "detect_entry_point",
                "logic": "Pattern match against known entry types: file_modification, bug_fix, feature_addition, refactoring",
                "validation": "Ensure single entry point type identified"
              }
            },
            "atom_002": {
              "name": "validate_input_format_compliance",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["entry_point_type", "raw_input"],
              "outputs": ["validation_status", "normalized_input"],
              "implementation": {
                "function": "validate_input_format",
                "logic": "Check against schema for each entry point type",
                "validation": "Schema validation passes"
              }
            },
            "atom_003": {
              "name": "extract_modification_requirements",
              "role": "planning_ai",
              "type": "ai_decision",
              "inputs": ["normalized_input", "codebase_context"],
              "outputs": ["modification_requirements"],
              "implementation": {
                "function": "extract_requirements",
                "tool": "claude_code",
                "prompt_template": "Analyze the following request and extract specific modification requirements: {input}",
                "validation": "Requirements are specific and actionable"
              }
            },
            "atom_004": {
              "name": "analyze_user_intent_patterns",
              "role": "planning_ai",
              "type": "ai_decision",
              "inputs": ["modification_requirements", "user_history"],
              "outputs": ["intent_classification", "priority_level"],
              "implementation": {
                "function": "analyze_intent",
                "tool": "claude_code",
                "logic": "Pattern recognition for common development intents",
                "validation": "Intent mapped to known patterns"
              }
            },
            "atom_005": {
              "name": "determine_analysis_depth_required",
              "role": "thinking_ai",
              "type": "ai_decision",
              "inputs": ["intent_classification", "codebase_size"],
              "outputs": ["analysis_depth_level"],
              "implementation": {
                "function": "determine_depth",
                "tool": "claude_code",
                "logic": "Map intent and codebase complexity to analysis depth (shallow/medium/deep)",
                "validation": "Depth level assigned"
              }
            },
            "atom_006": {
              "name": "assess_modification_complexity",
              "role": "thinking_ai",
              "type": "ai_decision",
              "inputs": ["modification_requirements", "analysis_depth_level"],
              "outputs": ["complexity_score", "risk_assessment"],
              "implementation": {
                "function": "assess_complexity",
                "tool": "claude_code",
                "logic": "Score 1-10 based on file count, change scope, dependency impact",
                "validation": "Complexity score within valid range"
              }
            },
            "atom_007": {
              "name": "calculate_resource_requirements",
              "role": "cost_resource_manager",
              "type": "deterministic",
              "inputs": ["complexity_score", "analysis_depth_level"],
              "outputs": ["estimated_tokens", "estimated_time", "tool_requirements"],
              "implementation": {
                "function": "calculate_resources",
                "logic": "Use lookup tables based on complexity and depth",
                "validation": "Resource estimates within bounds"
              }
            },
            "atom_008": {
              "name": "establish_quality_thresholds",
              "role": "qa_test_agent",
              "type": "deterministic",
              "inputs": ["complexity_score", "risk_assessment"],
              "outputs": ["quality_thresholds"],
              "implementation": {
                "function": "set_quality_thresholds",
                "logic": "Map complexity to test coverage, performance, security requirements",
                "validation": "All threshold types defined"
              }
            },
            "atom_009": {
              "name": "determine_convergence_readiness",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["all_previous_outputs"],
              "outputs": ["convergence_status"],
              "implementation": {
                "function": "check_convergence_readiness",
                "logic": "Validate all required outputs from atoms 001-008 are present",
                "validation": "All prerequisites met"
              }
            },
            "atom_010": {
              "name": "route_to_planning_pipeline",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["convergence_status"],
              "outputs": ["planning_route"],
              "implementation": {
                "function": "route_to_planning",
                "logic": "Transition to complexity assessment phase",
                "validation": "Route established"
              }
            }
          }
        },
        "complexity_assessment": {
          "atoms": "011-020",
          "type": "DETERMINISTIC",
          "atoms_detail": {
            "atom_011": {
              "name": "parse_technical_keywords",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_requirements"],
              "outputs": ["technical_keywords", "language_indicators"],
              "implementation": {
                "function": "parse_keywords",
                "logic": "Extract programming languages, frameworks, patterns from text",
                "validation": "Keywords extracted and categorized"
              }
            },
            "atom_012": {
              "name": "count_affected_files",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_requirements", "codebase_scan"],
              "outputs": ["file_count", "file_types"],
              "implementation": {
                "function": "count_files",
                "logic": "Scan filesystem for files matching modification patterns",
                "validation": "File count accurate"
              }
            },
            "atom_013": {
              "name": "measure_change_scope",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["file_count", "modification_requirements"],
              "outputs": ["scope_metrics"],
              "implementation": {
                "function": "measure_scope",
                "logic": "Calculate lines of code, function count, module dependencies",
                "validation": "Scope metrics computed"
              }
            },
            "atom_014": {
              "name": "calculate_complexity_score",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["scope_metrics", "technical_keywords"],
              "outputs": ["final_complexity_score"],
              "implementation": {
                "function": "calculate_complexity",
                "logic": "Weighted score based on file count, dependencies, language complexity",
                "validation": "Score between 1-100"
              }
            },
            "atom_015": {
              "name": "check_service_availability",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["tool_requirements"],
              "outputs": ["service_status"],
              "implementation": {
                "function": "check_services",
                "logic": "Ping all required services and check API limits",
                "validation": "Service status for each tool determined"
              }
            },
            "atom_016": {
              "name": "verify_quota_status",
              "role": "cost_resource_manager",
              "type": "deterministic",
              "inputs": ["estimated_tokens", "service_status"],
              "outputs": ["quota_availability"],
              "implementation": {
                "function": "check_quotas",
                "logic": "Query API limits for Claude, Gemini, GitHub, etc.",
                "validation": "Quota status for each service known"
              }
            },
            "atom_017": {
              "name": "determine_primary_tools",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["final_complexity_score", "service_status", "quota_availability"],
              "outputs": ["primary_tool_assignments"],
              "implementation": {
                "function": "assign_primary_tools",
                "logic": "Select best available tool for each role based on complexity and availability",
                "validation": "Primary tool assigned for each role"
              }
            },
            "atom_018": {
              "name": "establish_fallback_chains",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["primary_tool_assignments", "service_status"],
              "outputs": ["fallback_chains"],
              "implementation": {
                "function": "create_fallback_chains",
                "logic": "Create ordered list of alternative tools for each role",
                "validation": "Fallback chain defined for each role"
              }
            },
            "atom_019": {
              "name": "lock_resource_allocation",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["primary_tool_assignments", "estimated_tokens"],
              "outputs": ["resource_locks"],
              "implementation": {
                "function": "lock_resources",
                "logic": "Reserve quota and establish usage limits",
                "validation": "Resources successfully locked"
              }
            },
            "atom_020": {
              "name": "finalize_routing_decision",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["all_assessment_outputs"],
              "outputs": ["routing_decision"],
              "implementation": {
                "function": "finalize_routing",
                "logic": "Compile final routing configuration for workflow execution",
                "validation": "Routing decision complete and valid"
              }
            }
          }
        },
        "moddoc_initialization": {
          "atoms": "021-030",
          "type": "DETERMINISTIC",
          "atoms_detail": {
            "atom_021": {
              "name": "create_moddoc_schema",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_requirements", "complexity_score"],
              "outputs": ["moddoc_schema"],
              "implementation": {
                "function": "create_schema",
                "logic": "Generate ModDoc structure based on modification type and complexity",
                "validation": "Schema validates against ModDoc standard"
              }
            },
            "atom_022": {
              "name": "establish_modification_id",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["moddoc_schema"],
              "outputs": ["modification_id"],
              "implementation": {
                "function": "generate_id",
                "logic": "Create unique ID: timestamp + hash(requirements)",
                "validation": "ID is unique and follows format"
              }
            },
            "atom_023": {
              "name": "set_timestamp_markers",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_id"],
              "outputs": ["timestamp_markers"],
              "implementation": {
                "function": "set_timestamps",
                "logic": "Initialize start time, estimated completion, phase markers",
                "validation": "All timestamp fields populated"
              }
            },
            "atom_024": {
              "name": "initialize_cost_tracking",
              "role": "cost_resource_manager",
              "type": "deterministic",
              "inputs": ["modification_id", "estimated_tokens"],
              "outputs": ["cost_tracker"],
              "implementation": {
                "function": "init_cost_tracking",
                "logic": "Create cost tracking record with budget allocation",
                "validation": "Cost tracker initialized with valid budget"
              }
            },
            "atom_025": {
              "name": "create_audit_trail",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_id", "all_initialization_data"],
              "outputs": ["audit_trail"],
              "implementation": {
                "function": "create_audit_trail",
                "logic": "Initialize audit log with entry point decision chain",
                "validation": "Audit trail created with proper structure"
              }
            },
            "atom_026": {
              "name": "setup_monitoring_hooks",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_id"],
              "outputs": ["monitoring_hooks"],
              "implementation": {
                "function": "setup_monitoring",
                "logic": "Configure progress tracking, error monitoring, performance metrics",
                "validation": "Monitoring hooks active"
              }
            },
            "atom_027": {
              "name": "establish_rollback_points",
              "role": "resilience_agent",
              "type": "deterministic",
              "inputs": ["modification_id", "codebase_state"],
              "outputs": ["rollback_points"],
              "implementation": {
                "function": "create_rollback_points",
                "logic": "Snapshot current codebase state and configuration",
                "validation": "Rollback points created and verified"
              }
            },
            "atom_028": {
              "name": "configure_notification_channels",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["modification_id", "user_preferences"],
              "outputs": ["notification_config"],
              "implementation": {
                "function": "setup_notifications",
                "logic": "Configure progress updates, error alerts, completion notifications",
                "validation": "Notification channels configured"
              }
            },
            "atom_029": {
              "name": "validate_initialization_complete",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["all_initialization_outputs"],
              "outputs": ["initialization_status"],
              "implementation": {
                "function": "validate_initialization",
                "logic": "Check all required initialization steps completed successfully",
                "validation": "All validation checks pass"
              }
            },
            "atom_030": {
              "name": "transition_to_planning_phase",
              "role": "orchestrator",
              "type": "deterministic",
              "inputs": ["initialization_status"],
              "outputs": ["phase_transition"],
              "implementation": {
                "function": "transition_phase",
                "logic": "Update workflow state and proceed to Phase 1",
                "validation": "Phase transition successful"
              }
            }
          }
        }
      }
    },
    "phase_1": {
      "name": "UNIFIED PLANNING & ANALYSIS",
      "atoms": "031-090",
      "duration": "60 atoms",
      "description": "Research, planning, workstream creation, and tool assignment",
      "sections": {
        "research_information_gathering": {
          "atoms": "031-045",
          "type": "AI_MAKES_DECISIONS",
          "description": "Comprehensive codebase analysis and research"
        },
        "modification_planning": {
          "atoms": "046-065",
          "type": "AI_MAKES_DECISIONS",
          "description": "Task decomposition and execution planning"
        },
        "workstream_creation": {
          "atoms": "066-080",
          "type": "DETERMINISTIC",
          "description": "Parallel workstream isolation and configuration"
        },
        "tool_assignment_configuration": {
          "atoms": "081-090",
          "type": "DETERMINISTIC",
          "description": "Final tool mapping and configuration"
        }
      }
    },
    "phase_2": {
      "name": "PARALLEL CODE MODIFICATION EXECUTION",
      "atoms": "091-190",
      "duration": "100 atoms",
      "description": "Parallel execution across workstreams with VS Code validation",
      "sections": {
        "workstream_a_core_logic": {
          "atoms": "091-115",
          "type": "AI_MAKES_DECISIONS",
          "description": "Core business logic modifications"
        },
        "workstream_b_configuration": {
          "atoms": "116-140",
          "type": "DETERMINISTIC",
          "description": "Configuration and infrastructure changes"
        },
        "workstream_c_tests_docs": {
          "atoms": "141-165",
          "type": "AI_MAKES_DECISIONS",
          "description": "Test creation and documentation updates"
        },
        "vscode_universal_validation": {
          "atoms": "166-190",
          "type": "DETERMINISTIC",
          "description": "Comprehensive validation across all modifications"
        }
      }
    },
    "phase_3": {
      "name": "INTEGRATION & MERGE COORDINATION",
      "atoms": "191-265",
      "duration": "75 atoms",
      "description": "Conflict resolution, integration testing, and merge preparation",
      "sections": {
        "conflict_detection_resolution": {
          "atoms": "191-210",
          "type": "DETERMINISTIC",
          "description": "Automated and manual conflict resolution"
        },
        "integration_testing": {
          "atoms": "211-235",
          "type": "DETERMINISTIC",
          "description": "Comprehensive integration test suite"
        },
        "quality_gate_validation": {
          "atoms": "236-250",
          "type": "DETERMINISTIC",
          "description": "Quality threshold validation"
        },
        "final_merge_preparation": {
          "atoms": "251-265",
          "type": "DETERMINISTIC",
          "description": "Final validation and merge preparation"
        }
      }
    },
    "phase_4": {
      "name": "PR CREATION & REVIEW",
      "atoms": "266-315",
      "duration": "50 atoms",
      "description": "Pull request generation, automated review, and human oversight",
      "sections": {
        "pr_generation": {
          "atoms": "266-280",
          "type": "AI_MAKES_DECISIONS",
          "description": "Automated PR creation with comprehensive documentation"
        },
        "automated_review": {
          "atoms": "281-300",
          "type": "AI_MAKES_DECISIONS",
          "description": "AI-powered code review and feedback"
        },
        "human_review_gate": {
          "atoms": "301-315",
          "type": "AI_MAKES_DECISIONS",
          "description": "Human review coordination and feedback integration"
        }
      }
    },
    "phase_5": {
      "name": "MERGE & DEPLOYMENT",
      "atoms": "316-355",
      "duration": "40 atoms",
      "description": "Final merge execution, rollback preparation, and post-merge validation",
      "sections": {
        "final_merge_execution": {
          "atoms": "316-330",
          "type": "DETERMINISTIC",
          "description": "Automated merge execution"
        },
        "rollback_preparation": {
          "atoms": "331-340",
          "type": "DETERMINISTIC",
          "description": "Rollback plan creation and validation"
        },
        "post_merge_validation": {
          "atoms": "341-355",
          "type": "DETERMINISTIC",
          "description": "Post-deployment validation and monitoring"
        }
      }
    },
    "phase_6": {
      "name": "OBSERVABILITY & OPTIMIZATION",
      "atoms": "356-400",
      "duration": "45 atoms",
      "description": "Metrics collection, analysis, and continuous improvement",
      "sections": {
        "metrics_collection": {
          "atoms": "356-370",
          "type": "DETERMINISTIC",
          "description": "Comprehensive metrics gathering"
        },
        "analytics_reporting": {
          "atoms": "371-385",
          "type": "AI_MAKES_DECISIONS",
          "description": "Analysis and report generation"
        },
        "continuous_improvement": {
          "atoms": "386-400",
          "type": "AI_MAKES_DECISIONS",
          "description": "Pipeline optimization and improvement"
        }
      }
    }
  },
  "role_definitions": {
    "orchestrator": {
      "description": "Workflow coordination and state management",
      "primary_tool": "custom_orchestrator",
      "fallback_chain": ["github_actions", "local_scripts"],
      "responsibilities": ["workflow_state", "routing", "coordination", "monitoring"],
      "apis_required": ["workflow_engine", "state_management", "notification_system"]
    },
    "planning_ai": {
      "description": "Strategic planning and requirement analysis",
      "primary_tool": "claude_code",
      "fallback_chain": ["gemini", "local_llm"],
      "responsibilities": ["requirement_analysis", "task_planning", "architecture_decisions"],
      "apis_required": ["claude_api", "gemini_api", "context_management"]
    },
    "thinking_ai": {
      "description": "Complex reasoning and decision making",
      "primary_tool": "claude_code",
      "fallback_chain": ["codex", "gemini"],
      "responsibilities": ["complex_analysis", "optimization", "decision_making"],
      "apis_required": ["claude_api", "reasoning_engine", "optimization_algorithms"]
    },
    "work_cli_tools": {
      "description": "Direct code modification and generation",
      "primary_tool": "aider",
      "fallback_chain": ["codex", "continue"],
      "responsibilities": ["code_generation", "file_modification", "patch_application"],
      "apis_required": ["aider_cli", "codex_api", "file_system"]
    },
    "ide_code_editor": {
      "description": "Code validation and IDE operations",
      "primary_tool": "vscode",
      "fallback_chain": ["vscode_api", "language_servers"],
      "responsibilities": ["syntax_validation", "linting", "formatting", "diagnostics"],
      "apis_required": ["vscode_api", "language_server_protocol", "linter_engines"]
    },
    "repo_ai": {
      "description": "Git and repository operations",
      "primary_tool": "github_cli",
      "fallback_chain": ["git_commands", "api_calls"],
      "responsibilities": ["branch_management", "commit_operations", "pr_management"],
      "apis_required": ["github_api", "git_cli", "webhook_management"]
    },
    "merge_coordinator": {
      "description": "Merge conflict resolution and coordination",
      "primary_tool": "github_cli",
      "fallback_chain": ["custom_scripts", "manual_process"],
      "responsibilities": ["conflict_detection", "merge_strategies", "integration_management"],
      "apis_required": ["merge_algorithms", "conflict_resolution", "integration_testing"]
    },
    "resilience_agent": {
      "description": "Error handling and recovery operations",
      "primary_tool": "custom_scripts",
      "fallback_chain": ["aider", "manual_recovery"],
      "responsibilities": ["error_recovery", "rollback_procedures", "system_resilience"],
      "apis_required": ["backup_systems", "recovery_procedures", "health_monitoring"]
    },
    "qa_test_agent": {
      "description": "Testing and quality assurance",
      "primary_tool": "pytest",
      "fallback_chain": ["vscode_testing", "github_actions"],
      "responsibilities": ["test_execution", "quality_validation", "coverage_analysis"],
      "apis_required": ["test_frameworks", "coverage_tools", "quality_metrics"]
    },
    "security_compliance": {
      "description": "Security validation and compliance checking",
      "primary_tool": "snyk",
      "fallback_chain": ["bandit", "manual_audit"],
      "responsibilities": ["security_scanning", "vulnerability_assessment", "compliance_validation"],
      "apis_required": ["security_scanners", "vulnerability_databases", "compliance_frameworks"]
    },
    "cost_resource_manager": {
      "description": "Cost tracking and resource optimization",
      "primary_tool": "custom_tracker",
      "fallback_chain": ["cloud_apis", "manual_tracking"],
      "responsibilities": ["cost_monitoring", "resource_allocation", "budget_enforcement"],
      "apis_required": ["billing_apis", "usage_metrics", "cost_optimization"]
    },
    "docs_summarizer": {
      "description": "Documentation generation and maintenance",
      "primary_tool": "gemini",
      "fallback_chain": ["local_llm", "templates"],
      "responsibilities": ["documentation_generation", "summary_creation", "report_formatting"],
      "apis_required": ["documentation_tools", "template_engines", "formatting_apis"]
    },
    "human_oversight": {
      "description": "Human review coordination and approval",
      "primary_tool": "github_pr_reviews",
      "fallback_chain": ["slack_notifications", "email_alerts"],
      "responsibilities": ["review_coordination", "approval_management", "human_feedback"],
      "apis_required": ["review_systems", "notification_apis", "approval_workflows"]
    }
  },
  "tool_integrations": {
    "aider": {
      "type": "cli_tool",
      "api_type": "command_line",
      "installation": "pip install aider-chat",
      "configuration": {
        "api_key_required": true,
        "supported_models": ["gpt-4", "claude-3", "gemini-pro"],
        "file_types": ["python", "javascript", "typescript", "java", "go", "rust"]
      },
      "integration_spec": {
        "command_format": "aider --model {model} --yes --auto-commits {files}",
        "input_method": "stdin",
        "output_parsing": "json_logs",
        "error_handling": "exit_code_monitoring"
      }
    },
    "vscode": {
      "type": "ide_integration",
      "api_type": "language_server_protocol",
      "installation": "vscode_extension",
      "configuration": {
        "extensions_required": ["python", "typescript", "rust-analyzer", "java"],
        "diagnostic_providers": ["pylsp", "typescript-language-server", "rust-analyzer"],
        "formatting_providers": ["black", "prettier", "rustfmt"]
      },
      "integration_spec": {
        "api_endpoint": "http://localhost:3000/vscode-api",
        "authentication": "workspace_token",
        "request_format": "json_rpc",
        "response_format": "diagnostic_objects"
      }
    },
    "github_cli": {
      "type": "api_client",
      "api_type": "rest_graphql",
      "installation": "gh auth login",
      "configuration": {
        "token_required": true,
        "scopes": ["repo", "workflow", "read:org"],
        "rate_limits": "5000_requests_per_hour"
      },
      "integration_spec": {
        "command_format": "gh {subcommand} --json",
        "api_base": "https://api.github.com",
        "authentication": "bearer_token",
        "output_format": "json"
      }
    },
    "claude_code": {
      "type": "ai_service",
      "api_type": "rest_api",
      "installation": "api_key_setup",
      "configuration": {
        "model": "claude-3-sonnet",
        "max_tokens": 8192,
        "temperature": 0.1,
        "rate_limits": "token_based"
      },
      "integration_spec": {
        "api_endpoint": "https://api.anthropic.com/v1/messages",
        "authentication": "api_key_header",
        "request_format": "json_messages",
        "response_format": "json_completion"
      }
    },
    "gemini": {
      "type": "ai_service",
      "api_type": "rest_api",
      "installation": "gcloud_auth",
      "configuration": {
        "model": "gemini-pro",
        "max_tokens": 4096,
        "temperature": 0.2,
        "rate_limits": "requests_per_minute"
      },
      "integration_spec": {
        "api_endpoint": "https://generativelanguage.googleapis.com/v1beta/models",
        "authentication": "oauth2_token",
        "request_format": "json_generate_content",
        "response_format": "json_candidates"
      }
    },
    "pytest": {
      "type": "testing_framework",
      "api_type": "command_line",
      "installation": "pip install pytest pytest-cov",
      "configuration": {
        "plugins": ["pytest-cov", "pytest-xdist", "pytest-html"],
        "coverage_threshold": 80,
        "parallel_execution": true
      },
      "integration_spec": {
        "command_format": "pytest --cov={package} --cov-report=json --json-report",
        "output_parsing": "json_report",
        "result_validation": "coverage_thresholds"
      }
    }
  },
  "schemas": {
    "moddoc_schema": {
      "type": "object",
      "required": ["id", "metadata", "phases", "status"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^moddoc_[0-9]{14}_[a-f0-9]{8}$"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "created_at": {"type": "string", "format": "date-time"},
            "complexity_score": {"type": "integer", "minimum": 1, "maximum": 100},
            "estimated_tokens": {"type": "integer"},
            "modification_type": {"type": "string", "enum": ["bug_fix", "feature", "refactor", "docs"]}
          }
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "phase_id": {"type": "string"},
              "status": {"type": "string", "enum": ["pending", "in_progress", "completed", "failed"]},
              "atoms": {"type": "array", "items": {"$ref": "#/definitions/atom"}}
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "current_phase": {"type": "string"},
            "current_atom": {"type": "string"},
            "completion_percentage": {"type": "number", "minimum": 0, "maximum": 100}
          }
        }
      },
      "definitions": {
        "atom": {
          "type": "object",
          "properties": {
            "atom_id": {"type": "string"},
            "name": {"type": "string"},
            "role": {"type": "string"},
            "status": {"type": "string"},
            "inputs": {"type": "array"},
            "outputs": {"type": "array"},
            "execution_time": {"type": "number"},
            "cost": {"type": "number"}
          }
        }
      }
    },
    "artifact_schemas": {
      "diagnostics_report": {
        "type": "object",
        "properties": {
          "timestamp": {"type": "string", "format": "date-time"},
          "files_analyzed": {"type": "array", "items": {"type": "string"}},
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {"type": "string"},
                "line": {"type": "integer"},
                "column": {"type": "integer"},
                "severity": {"type": "string", "enum": ["error", "warning", "info"]},
                "message": {"type": "string"},
                "rule": {"type": "string"}
              }
            }
          },
          "summary": {
            "type": "object",
            "properties": {
              "total_issues": {"type": "integer"},
              "errors": {"type": "integer"},
              "warnings": {"type": "integer"},
              "files_with_issues": {"type": "integer"}
            }
          }
        }
      },
      "test_report": {
        "type": "object",
        "properties": {
          "timestamp": {"type": "string", "format": "date-time"},
          "test_results": {
            "type": "object",
            "properties": {
              "total": {"type": "integer"},
              "passed": {"type": "integer"},
              "failed": {"type": "integer"},
              "skipped": {"type": "integer"}
            }
          },
          "coverage": {
            "type": "object",
            "properties": {
              "line_coverage": {"type": "number"},
              "branch_coverage": {"type": "number"},
              "function_coverage": {"type": "number"}
            }
          },
          "duration": {"type": "number"}
        }
      }
    }
  },
  "quality_gates": {
    "code_quality": {
      "metrics": {
        "syntax_errors": {"threshold": 0, "operator": "equals"},
        "linting_errors": {"threshold": 0, "operator": "equals"},
        "formatting_compliance": {"threshold": 100, "operator": "gte"},
        "complexity_score": {"threshold": 10, "operator": "lte"}
      },
      "validation_logic": "All metrics must pass for gate to succeed"
    },
    "test_quality": {
      "metrics": {
        "test_pass_rate": {"threshold": 100, "operator": "equals"},
        "line_coverage": {"threshold": 80, "operator": "gte"},
        "branch_coverage": {"threshold": 70, "operator": "gte"}
      },
      "validation_logic": "All coverage thresholds must be met"
    },
    "security_compliance": {
      "metrics": {
        "high_vulnerabilities": {"threshold": 0, "operator": "equals"},
        "medium_vulnerabilities": {"threshold": 2, "operator": "lte"},
        "dependency_age": {"threshold": 365, "operator": "lte"}
      },
      "validation_logic": "No high vulnerabilities allowed"
    },
    "performance": {
      "metrics": {
        "build_time": {"threshold": 300, "operator": "lte"},
        "test_execution_time": {"threshold": 120, "operator": "lte"},
        "memory_usage": {"threshold": 512, "operator": "lte"}
      },
      "validation_logic": "Performance benchmarks must be maintained"
    }
  },
  "cost_management": {
    "token_tracking": {
      "providers": {
        "claude": {"rate": 0.008, "unit": "per_1k_tokens"},
        "gemini": {"rate": 0.002, "unit": "per_1k_tokens"},
        "codex": {"rate": 0.006, "unit": "per_1k_tokens"}
      },
      "budget_allocation": {
        "planning_phase": 30,
        "execution_phase": 50,
        "review_phase": 15,
        "optimization_phase": 5
      },
      "cost_controls": {
        "daily_limit": 50,
        "per_modification_limit": 10,
        "approval_threshold": 25
      }
    }
  },
  "state_management": {
    "persistence": {
      "storage_type": "file_system",
      "state_file": ".pipeline_state.json",
      "backup_frequency": "per_atom",
      "retention_policy": "7_days"
    },
    "recovery": {
      "checkpoint_frequency": "per_phase",
      "rollback_capability": "atom_level",
      "failure_recovery": "automatic_retry_3x"
    }
  },
  "implementation_roadmap": {
    "phase_1_foundation": {
      "duration": "2 weeks",
      "deliverables": [
        "Core orchestrator engine",
        "ModDoc schema implementation",
        "Basic state management",
        "Role-tool mapping system"
      ],
      "critical_path": [
        "Create workflow_engine.py",
        "Implement atom execution framework",
        "Add state persistence",
        "Build tool adapter interfaces"
      ]
    },
    "phase_2_tool_integration": {
      "duration": "3 weeks",
      "deliverables": [
        "Aider integration",
        "VS Code API wrapper",
        "GitHub CLI adapter",
        "Cost tracking system"
      ],
      "critical_path": [
        "Build aider_adapter.py",
        "Create vscode_integration.py",
        "Implement github_adapter.py",
        "Add cost_tracker.py"
      ]
    },
    "phase_3_pipeline_execution": {
      "duration": "4 weeks",
      "deliverables": [
        "Complete Phase 0-1 implementation",
        "Workstream isolation",
        "Quality gate system",
        "Basic conflict resolution"
      ],
      "critical_path": [
        "Implement entry point processing",
        "Build workstream management",
        "Create quality validation",
        "Add merge coordination"
      ]
    },
    "phase_4_advanced_features": {
      "duration": "3 weeks",
      "deliverables": [
        "Full AI integration",
        "Advanced conflict resolution",
        "Human oversight workflows",
        "Comprehensive monitoring"
      ],
      "critical_path": [
        "Complete AI adapter integration",
        "Implement advanced merge logic",
        "Build review coordination",
        "Add observability features"
      ]
    }
  },
  "validation_requirements": {
    "unit_tests": {
      "coverage_requirement": 90,
      "test_types": ["atom_execution", "state_management", "tool_integration", "error_handling"]
    },
    "integration_tests": {
      "scenarios": ["simple_modification", "complex_refactor", "multi_workstream", "failure_recovery"],
      "success_criteria": "All scenarios complete successfully"
    },
    "performance_tests": {
      "benchmarks": {
        "simple_modification": "< 60 seconds",
        "medium_complexity": "< 300 seconds",
        "complex_refactor": "< 900 seconds"
      }
    }
  },
  "deployment_specification": {
    "system_requirements": {
      "python_version": "3.9+",
      "memory": "4GB minimum",
      "storage": "10GB for artifacts",
      "network": "internet access for AI APIs"
    },
    "installation_steps": [
      "Clone repository",
      "Install dependencies: pip install -r requirements.txt",
      "Configure API keys in .env file",
      "Run setup script: python setup.py install",
      "Validate installation: pipeline-cli validate"
    ],
    "configuration_files": [
      ".env (API keys and secrets)",
      "config/pipeline.yaml (pipeline configuration)",
      "config/tools.yaml (tool configurations)",
      "config/quality_gates.yaml (quality thresholds)"
    ]
  }
}