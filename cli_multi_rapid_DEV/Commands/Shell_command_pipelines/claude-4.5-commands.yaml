# claude-4.5-commands.yaml
meta:
  title: "Claude 4.5 — Commands & Tools Cheat Sheet (Agentic Coding)"
  version: "2025-09-30"
  source_file: "claude_4_5_slash_commands.md"
  audience: "Automation pipelines invoking Claude Code/agentic tools"
  notes:
    - "The referenced system card does not list IDE-style slash commands."
    - "It describes tool invocations available to the model during coding tasks."
    - "This file expresses those tools as deterministic, pipeline-friendly commands."

conventions:
  placeholders:
    <path>: "Filesystem path"
    <text>: "Arbitrary text content"
    <cmd>: "Shell command string"
    <lang>: "Language hint (e.g., python, bash)"
    <patch>: "Unified diff or JSON patch"
  tips:
    - "Treat these as abstract commands your orchestrator can translate to real API/tool calls."
    - "Always capture stdout/stderr and exit codes; prefer JSON outputs when possible."

commands:
  - group: "execution"
    cmd: "claude.exec --tool bash --cmd \"<cmd>\""
    purpose: "Ask Claude's bash tool to execute shell commands in a sandbox."
    examples:
      - "claude.exec --tool bash --cmd \"python -V\""
      - "claude.exec --tool bash --cmd \"pytest -q\""
    idempotent: false
    outputs:
      - "stdout"
      - "stderr"
      - "exit_code"

  - group: "filesystem"
    cmd: "claude.read --path \"<path>\""
    purpose: "Ask Claude's ReadFile tool to read a file (for analysis/context)."
    examples:
      - "claude.read --path \"README.md\""
      - "claude.read --path \"src/app.py\""
    idempotent: true
    outputs:
      - "content"

  - group: "filesystem"
    cmd: "claude.edit --path \"<path>\" --patch \"<patch>\""
    purpose: "Ask Claude's FileEdit tool to apply an edit (patch-based)."
    examples:
      - "claude.edit --path \"src/app.py\" --patch \"@@ ... unified diff ...\""
      - "claude.edit --path \"pyproject.toml\" --patch \"{json_patch}\""
    idempotent: false
    outputs:
      - "diff_applied: true|false"
      - "hunks: int"
      - "errors"

  - group: "planning"
    cmd: "claude.plan --prompt \"<text>\" --lang \"<lang>\""
    purpose: "Ask Claude to produce a step-by-step plan or code changes (JSON output preferred)."
    examples:
      - "claude.plan --prompt \"Refactor module for testability\" --lang python"
      - "claude.plan --prompt \"Draft a migration plan and risks\""
    idempotent: true
    outputs:
      - "plan.json"
      - "rationale"

  - group: "review"
    cmd: "claude.review --prompt \"<text>\" --path \"<path>\""
    purpose: "Ask Claude to critique or validate code/tests/config and emit structured findings."
    examples:
      - "claude.review --prompt \"Find security issues\" --path \"src/\""
      - "claude.review --prompt \"Explain failing tests and propose fix\" --path \"tests/\""
    idempotent: true
    outputs:
      - "findings.json"

  - group: "policy"
    cmd: "claude.policy-check --prompt \"<text>\""
    purpose: "Pre-flight check for policy risks; returns structured allow/deny with reasons."
    idempotent: true
    outputs:
      - "decision: allow|deny"
      - "reasons"

provenance_excerpt: |-
# Claude Sonnet 4.5 — Slash Commands (from System Card)

**Generated:** 2025-09-30 10:34:56

## Summary
The uploaded *Claude Sonnet 4.5 System Card* does **not** list any IDE-style **slash commands** (e.g., `/something`).
Instead, it references the standard **Claude Code tool commands** that the model can use during agentic coding evaluations.

## Tool Commands Referenced in the System Card
- `bash` tool — executes shell commands in a terminal-like environment.
- `ReadFile` — reads file contents for analysis.
- `FileEdit` — edits files programmatically during agentic coding tasks.

> Note: If you're looking for the latest IDE-specific slash commands (like those in Claude Desktop/Claude Code UI),
> please consult the live product docs or release notes for that IDE; the system card is focused on safety/capability evaluations.

## Citations
- Tools mentioned (bash, ReadFile, FileEdit) appear in the Claude Code evaluation setup within the system card.
  See the citations in your chat for exact line references.
