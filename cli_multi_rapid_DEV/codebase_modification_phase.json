{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Production-Ready Codebase Modification Phase",
  "description": "Comprehensive JSON specification for deterministic codebase modification workflow with CLI tool integration, GitHub operations, and error recovery",
  "version": "1.0.0",
  "created": "2025-09-29T12:00:00Z",

  "metadata": {
    "system": "CLI Orchestrator",
    "framework_version": "simplified-25ops",
    "integration_level": "production",
    "cost_optimization": "enabled",
    "conflict_resolution": "semantic_deterministic",
    "save_point_strategy": "atomic_checkpoints"
  },

  "architecture": {
    "phases": 3,
    "total_operations": 25,
    "execution_pattern": "deterministic_first_ai_escalation",
    "github_integration": "deterministic_github_ops_v2",
    "error_recovery": "checkpoint_rollback",
    "cost_tracking": "token_budget_enforcement"
  },

  "role_mappings": {
    "planning_ai": {
      "description": "Analyze requests, create modification plans, determine resource requirements",
      "primary_adapter": "ai_editor",
      "fallback_adapters": ["ai_analyst"],
      "cost_tier": "premium",
      "max_tokens_per_operation": 8000,
      "operations": ["001", "002", "012", "023"]
    },
    "work_cli_tools": {
      "description": "Apply deterministic code modifications, refactoring, formatting",
      "primary_adapter": "ai_editor",
      "fallback_adapters": ["code_fixers"],
      "cost_tier": "standard",
      "max_tokens_per_operation": 4000,
      "operations": ["009", "010", "011"]
    },
    "ide_validator": {
      "description": "Universal syntax checking, error detection, quick fixes",
      "primary_adapter": "vscode_diagnostics",
      "fallback_adapters": ["syntax_validator", "type_checker"],
      "cost_tier": "free",
      "max_tokens_per_operation": 0,
      "operations": ["013", "014", "015", "016", "017", "018", "019", "020", "022"]
    },
    "repo_coordinator": {
      "description": "Git operations, branch management, PR creation",
      "primary_adapter": "git_ops",
      "fallback_adapters": ["github_integration"],
      "cost_tier": "free",
      "max_tokens_per_operation": 0,
      "operations": ["004", "021", "024", "025"]
    },
    "orchestrator": {
      "description": "Workflow coordination, state management, cost tracking",
      "primary_adapter": "enhanced_bundle_applier",
      "fallback_adapters": ["state_capture", "cost_estimator"],
      "cost_tier": "free",
      "max_tokens_per_operation": 0,
      "operations": ["003", "005", "006", "007", "008"]
    }
  },

  "github_operations": {
    "source_config": "deterministic_github_ops.v2.yaml",
    "commands": {
      "gh-init-workspace": {
        "operation_id": "004",
        "phase": "plan_and_route",
        "description": "Initialize isolated workspace with proper branch strategy",
        "save_point": true,
        "conflict_resolution": false
      },
      "gh-checkpoint": {
        "operation_id": "checkpoint",
        "phase": "execute_and_validate",
        "description": "Atomic save point - commits and syncs current state to remote",
        "save_point": true,
        "conflict_resolution": false
      },
      "gh-merge-workstreams": {
        "operation_id": "021",
        "phase": "integrate_and_ship",
        "description": "Merge multiple parallel workstream branches without conflicts",
        "save_point": true,
        "conflict_resolution": true
      },
      "gh-create-pr": {
        "operation_id": "024",
        "phase": "integrate_and_ship",
        "description": "Create or update pull request with complete context",
        "save_point": true,
        "conflict_resolution": false
      },
      "gh-cleanup-branches": {
        "operation_id": "025",
        "phase": "integrate_and_ship",
        "description": "Clean up temporary branches and worktrees after merge",
        "save_point": true,
        "conflict_resolution": false
      },
      "gh-semantic-merge": {
        "operation_id": "semantic_merge",
        "phase": "integrate_and_ship",
        "description": "Smart merge resolution for JSON/YAML/lockfiles with persistent learning",
        "save_point": false,
        "conflict_resolution": true
      }
    }
  },

  "phase_definitions": {
    "phase_1_plan_and_route": {
      "name": "Plan & Route",
      "duration_estimate": "2-5 minutes",
      "cost_target": "$1.00",
      "operations": [
        {
          "id": "001",
          "name": "analyze_modification_request",
          "type": "ai_decision",
          "role": "planning_ai",
          "adapter": "ai_editor",
          "tool_params": {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 4000,
            "prompt_template": "Analyze the provided modification request, file attachments, and repository context. Extract clear modification requirements including: 1) Specific files to modify, 2) Type of changes needed, 3) Functional requirements, 4) Quality constraints, 5) Risk assessment. Output structured JSON."
          },
          "inputs": ["user_request", "file_attachments", "repo_context"],
          "outputs": ["artifacts/modification_requirements.json"],
          "complexity_hint": 0.3
        },
        {
          "id": "002",
          "name": "assess_complexity_and_scope",
          "type": "ai_decision",
          "role": "planning_ai",
          "adapter": "ai_editor",
          "tool_params": {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 2000,
            "prompt_template": "Analyze the modification requirements and assess: 1) Complexity score (0-1), 2) Number of files affected, 3) Estimated lines of code changes, 4) Risk level (low/medium/high), 5) Required tool capabilities. Output structured assessment."
          },
          "inputs": ["artifacts/modification_requirements.json"],
          "outputs": ["artifacts/complexity_assessment.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "003",
          "name": "determine_resource_allocation",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "enhanced_bundle_applier",
          "script_params": {
            "script": "allocate_resources.py",
            "input_file": "artifacts/complexity_assessment.json",
            "output_file": "artifacts/resource_plan.json"
          },
          "inputs": ["artifacts/complexity_assessment.json"],
          "outputs": ["artifacts/resource_plan.json"],
          "complexity_hint": 0.1
        },
        {
          "id": "004",
          "name": "create_workspace_isolation",
          "type": "github_operation",
          "role": "repo_coordinator",
          "adapter": "git_ops",
          "github_command": "gh-init-workspace",
          "save_point": true,
          "inputs": ["artifacts/resource_plan.json"],
          "outputs": ["artifacts/workspace_config.json"],
          "complexity_hint": 0.1
        },
        {
          "id": "005",
          "name": "select_tools_and_fallbacks",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "enhanced_bundle_applier",
          "script_params": {
            "script": "select_tools.py",
            "input_files": ["artifacts/complexity_assessment.json", "artifacts/resource_plan.json"],
            "output_file": "artifacts/tool_assignment.json"
          },
          "inputs": ["artifacts/complexity_assessment.json", "artifacts/resource_plan.json"],
          "outputs": ["artifacts/tool_assignment.json"],
          "complexity_hint": 0.1
        },
        {
          "id": "006",
          "name": "establish_quality_gates",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "enhanced_bundle_applier",
          "script_params": {
            "script": "set_quality_gates.py",
            "input_file": "artifacts/complexity_assessment.json",
            "output_file": "artifacts/quality_criteria.json"
          },
          "inputs": ["artifacts/complexity_assessment.json"],
          "outputs": ["artifacts/quality_criteria.json"],
          "complexity_hint": 0.1
        },
        {
          "id": "007",
          "name": "validate_plan_feasibility",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "enhanced_bundle_applier",
          "script_params": {
            "script": "validate_plan.py",
            "input_files": ["artifacts/resource_plan.json", "artifacts/tool_assignment.json", "artifacts/quality_criteria.json"],
            "output_file": "artifacts/execution_plan.json"
          },
          "inputs": ["artifacts/resource_plan.json", "artifacts/tool_assignment.json", "artifacts/quality_criteria.json"],
          "outputs": ["artifacts/execution_plan.json"],
          "complexity_hint": 0.1
        },
        {
          "id": "008",
          "name": "initialize_cost_tracking",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "cost_estimator",
          "script_params": {
            "script": "init_cost_tracking.py",
            "input_file": "artifacts/execution_plan.json",
            "output_file": "artifacts/cost_budget.json"
          },
          "inputs": ["artifacts/execution_plan.json"],
          "outputs": ["artifacts/cost_budget.json"],
          "complexity_hint": 0.1
        }
      ]
    },

    "phase_2_execute_and_validate": {
      "name": "Execute & Validate",
      "duration_estimate": "5-20 minutes",
      "cost_target": "$2.00",
      "operations": [
        {
          "id": "009",
          "name": "apply_code_modifications",
          "type": "ai_decision",
          "role": "work_cli_tools",
          "adapter": "ai_editor",
          "tool_params": {
            "tool": "aider",
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 8000,
            "operation": "edit",
            "strategy": "minimal-diff",
            "prompt_template": "Apply the code modifications specified in the execution plan. Focus on: 1) Implementing the exact changes requested, 2) Maintaining existing functionality, 3) Following code style conventions, 4) Adding appropriate comments for changes. Be conservative and precise."
          },
          "inputs": ["artifacts/execution_plan.json", "target_files"],
          "outputs": ["modified_files", "artifacts/modification_log.json"],
          "complexity_hint": 0.8
        },
        {
          "id": "010",
          "name": "resolve_immediate_conflicts",
          "type": "ai_decision",
          "role": "work_cli_tools",
          "adapter": "ai_editor",
          "tool_params": {
            "tool": "aider",
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 4000,
            "operation": "fix",
            "prompt_template": "Analyze and resolve any immediate conflicts in the modified files. Focus on: 1) Import conflicts, 2) Syntax errors, 3) Type conflicts, 4) Logical inconsistencies. Maintain the intent of the original modifications."
          },
          "inputs": ["modified_files", "conflict_reports"],
          "outputs": ["resolved_files", "artifacts/conflict_resolution.json"],
          "complexity_hint": 0.6
        },
        {
          "id": "011",
          "name": "apply_formatting_standards",
          "type": "deterministic",
          "role": "work_cli_tools",
          "adapter": "code_fixers",
          "tool_params": {
            "tools": ["ruff", "black", "isort"],
            "fix": true,
            "files": "resolved_files"
          },
          "inputs": ["resolved_files"],
          "outputs": ["formatted_files", "artifacts/formatting_log.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "012",
          "name": "generate_modification_summary",
          "type": "ai_decision",
          "role": "planning_ai",
          "adapter": "ai_editor",
          "tool_params": {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 2000,
            "prompt_template": "Generate a comprehensive summary of all modifications made. Include: 1) Files changed, 2) Types of changes, 3) Business impact, 4) Technical details, 5) Potential risks. Format as structured markdown."
          },
          "inputs": ["artifacts/modification_log.json", "artifacts/conflict_resolution.json"],
          "outputs": ["artifacts/change_summary.md"],
          "complexity_hint": 0.3
        },
        {
          "id": "013",
          "name": "syntax_and_import_validation",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "vscode_diagnostics",
          "tool_params": {
            "analyzers": ["python", "ruff", "mypy"],
            "files": "formatted_files"
          },
          "inputs": ["formatted_files"],
          "outputs": ["artifacts/validation_report.json", "artifacts/quick_fixes.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "014",
          "name": "apply_automated_fixes",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "vscode_diagnostics",
          "tool_params": {
            "operation": "apply_fixes",
            "input_files": "formatted_files",
            "fixes_file": "artifacts/quick_fixes.json"
          },
          "inputs": ["formatted_files", "artifacts/quick_fixes.json"],
          "outputs": ["corrected_files", "artifacts/fix_log.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "015",
          "name": "run_language_specific_linting",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "vscode_diagnostics",
          "tool_params": {
            "analyzers": ["ruff", "pylint", "flake8"],
            "files": "corrected_files"
          },
          "inputs": ["corrected_files"],
          "outputs": ["artifacts/lint_report.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "016",
          "name": "perform_security_scan",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "security_scanner",
          "tool_params": {
            "scanners": ["bandit", "safety"],
            "files": "corrected_files"
          },
          "inputs": ["corrected_files"],
          "outputs": ["artifacts/security_report.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "017",
          "name": "run_existing_tests",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "pytest_runner",
          "tool_params": {
            "path": "tests/",
            "coverage": true,
            "test_discovery": true
          },
          "inputs": ["corrected_files", "test_discovery"],
          "outputs": ["artifacts/test_results.json"],
          "complexity_hint": 0.4
        },
        {
          "id": "018",
          "name": "check_coverage_thresholds",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "pytest_runner",
          "tool_params": {
            "operation": "coverage_check",
            "threshold_file": "artifacts/quality_criteria.json"
          },
          "inputs": ["artifacts/test_results.json", "artifacts/quality_criteria.json"],
          "outputs": ["artifacts/coverage_report.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "019",
          "name": "validate_performance_impact",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "vscode_diagnostics",
          "tool_params": {
            "analyzers": ["performance_check"],
            "baseline": "performance_benchmarks"
          },
          "inputs": ["corrected_files", "performance_benchmarks"],
          "outputs": ["artifacts/performance_report.json"],
          "complexity_hint": 0.3
        },
        {
          "id": "020",
          "name": "aggregate_quality_metrics",
          "type": "deterministic",
          "role": "orchestrator",
          "adapter": "enhanced_bundle_applier",
          "script_params": {
            "script": "aggregate_quality.py",
            "input_files": [
              "artifacts/lint_report.json",
              "artifacts/security_report.json",
              "artifacts/test_results.json",
              "artifacts/coverage_report.json"
            ],
            "output_file": "artifacts/quality_gate_results.json"
          },
          "inputs": ["artifacts/lint_report.json", "artifacts/security_report.json", "artifacts/test_results.json", "artifacts/coverage_report.json"],
          "outputs": ["artifacts/quality_gate_results.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "checkpoint",
          "name": "commit_and_push_changes",
          "type": "github_operation",
          "role": "repo_coordinator",
          "adapter": "git_ops",
          "github_command": "gh-checkpoint",
          "save_point": true,
          "inputs": ["corrected_files", "artifacts/quality_gate_results.json"],
          "outputs": ["artifacts/checkpoint.json"],
          "complexity_hint": 0.1
        }
      ]
    },

    "phase_3_integrate_and_ship": {
      "name": "Integrate & Ship",
      "duration_estimate": "3-10 minutes",
      "cost_target": "$0.50",
      "operations": [
        {
          "id": "021",
          "name": "create_integration_branch",
          "type": "github_operation",
          "role": "repo_coordinator",
          "adapter": "git_ops",
          "github_command": "gh-merge-workstreams",
          "save_point": true,
          "inputs": ["corrected_files", "artifacts/quality_gate_results.json"],
          "outputs": ["artifacts/integration_branch_info.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "022",
          "name": "run_integration_tests",
          "type": "deterministic",
          "role": "ide_validator",
          "adapter": "pytest_runner",
          "tool_params": {
            "path": "tests/integration/",
            "coverage": true,
            "parallel": true
          },
          "inputs": ["artifacts/integration_branch_info.json"],
          "outputs": ["artifacts/integration_test_results.json"],
          "complexity_hint": 0.4
        },
        {
          "id": "023",
          "name": "generate_pr_documentation",
          "type": "ai_decision",
          "role": "planning_ai",
          "adapter": "ai_editor",
          "tool_params": {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 3000,
            "prompt_template": "Generate comprehensive PR documentation including: 1) Summary of changes, 2) Business justification, 3) Technical implementation details, 4) Testing coverage, 5) Risk assessment, 6) Deployment notes. Format as GitHub-flavored markdown."
          },
          "inputs": ["artifacts/change_summary.md", "artifacts/quality_gate_results.json", "artifacts/integration_test_results.json"],
          "outputs": ["artifacts/pr_description.md"],
          "complexity_hint": 0.3
        },
        {
          "id": "024",
          "name": "create_pull_request",
          "type": "github_operation",
          "role": "repo_coordinator",
          "adapter": "git_ops",
          "github_command": "gh-create-pr",
          "save_point": true,
          "inputs": ["artifacts/integration_branch_info.json", "artifacts/pr_description.md"],
          "outputs": ["artifacts/pr_info.json"],
          "complexity_hint": 0.2
        },
        {
          "id": "025",
          "name": "finalize_workflow_artifacts",
          "type": "github_operation",
          "role": "repo_coordinator",
          "adapter": "git_ops",
          "github_command": "gh-cleanup-branches",
          "save_point": true,
          "inputs": ["artifacts/pr_info.json", "artifacts/cost_budget.json", "artifacts/quality_gate_results.json"],
          "outputs": ["artifacts/workflow_completion_report.json"],
          "complexity_hint": 0.1
        }
      ]
    }
  },

  "save_point_system": {
    "strategy": "atomic_checkpoints",
    "frequency": "after_each_phase_and_critical_operations",
    "locations": [
      {
        "operation_id": "004",
        "type": "workspace_initialization",
        "github_command": "gh-init-workspace",
        "rollback_capability": "full_workspace_reset"
      },
      {
        "operation_id": "checkpoint",
        "type": "modification_completion",
        "github_command": "gh-checkpoint",
        "rollback_capability": "git_reset_to_checkpoint"
      },
      {
        "operation_id": "021",
        "type": "integration_branch_creation",
        "github_command": "gh-merge-workstreams",
        "rollback_capability": "branch_deletion_and_reset"
      },
      {
        "operation_id": "024",
        "type": "pull_request_creation",
        "github_command": "gh-create-pr",
        "rollback_capability": "pr_closure_and_branch_cleanup"
      },
      {
        "operation_id": "025",
        "type": "workflow_finalization",
        "github_command": "gh-cleanup-branches",
        "rollback_capability": "artifact_preservation_only"
      }
    ]
  },

  "conflict_resolution": {
    "source": "deterministic_github_ops.v2.yaml",
    "strategy": "semantic_with_rerere",
    "rules": [
      {
        "pattern": "*.json",
        "strategy": "theirs"
      },
      {
        "pattern": "*.lock",
        "strategy": "theirs"
      },
      {
        "pattern": "src/**/*.py",
        "strategy": "patience_3way"
      }
    ],
    "semantic_merge_command": "gh-semantic-merge",
    "learning_enabled": true
  },

  "cost_management": {
    "budget_limits": {
      "per_change": "$3.00",
      "daily_developer": "$15.00",
      "monthly_team": "$300.00"
    },
    "optimization": {
      "cache_duration": "24_hours",
      "batch_processing": true,
      "free_tier_preference": true,
      "cost_alerts": "80_percent_threshold"
    },
    "tracking": {
      "granularity": "per_operation",
      "reporting": "real_time",
      "budget_enforcement": "hard_limits"
    }
  },

  "tool_selection_matrix": {
    "complexity_low": {
      "criteria": "<5 files, <200 lines, no architecture changes",
      "planning_ai": "ai_editor",
      "work_cli_tools": "code_fixers",
      "cost_estimate": "$0.25"
    },
    "complexity_moderate": {
      "criteria": "5-20 files, 200-1000 lines, minor architecture changes",
      "planning_ai": "ai_editor",
      "work_cli_tools": "ai_editor",
      "cost_estimate": "$1.50"
    },
    "complexity_high": {
      "criteria": ">20 files, >1000 lines, major architecture changes",
      "planning_ai": "ai_editor",
      "work_cli_tools": "ai_editor",
      "additional_review": "human_oversight_required",
      "cost_estimate": "$3.00"
    }
  },

  "fallback_strategies": {
    "tool_unavailable": {
      "action": "automatic_fallback_to_secondary",
      "notification": "log_fallback_event"
    },
    "secondary_unavailable": {
      "action": "fallback_to_tertiary",
      "notification": "alert_user"
    },
    "all_tools_unavailable": {
      "action": "queue_for_manual_processing",
      "notification": "escalate_to_human"
    }
  },

  "quality_gates": {
    "low_risk": {
      "criteria": ["documentation_only", "test_additions", "formatting_changes"],
      "gates": ["syntax_check", "basic_linting"],
      "approval": "automated"
    },
    "medium_risk": {
      "criteria": ["feature_additions", "refactoring", "configuration_changes"],
      "gates": ["syntax_check", "comprehensive_linting", "unit_tests", "security_scan"],
      "approval": "peer_review_optional"
    },
    "high_risk": {
      "criteria": ["core_business_logic", "security_changes", "database_migrations"],
      "gates": ["full_validation_suite", "integration_tests", "performance_tests"],
      "approval": "senior_review_required"
    }
  },

  "execution_workflow": {
    "name": "Codebase Modification Production Workflow",
    "framework_version": "simplified-25ops",
    "inputs": {
      "files": ["src/**/*.py"],
      "lane": "lane/codebase-modification/production"
    },
    "policy": {
      "max_tokens": 50000,
      "prefer_deterministic": true,
      "routing_strategy": "complexity_based",
      "timeout_minutes": 45
    },
    "metadata": {
      "orchestration_pattern": "sequential_with_checkpoints",
      "cost_budget": 50000,
      "coordination": {
        "file_scope": ["src/**/*.py", "tests/**/*.py", "*.py"],
        "scope_mode": "exclusive",
        "risk_level": "medium",
        "priority": 5,
        "branch_strategy": "feature",
        "merge_queue": {
          "enabled": true,
          "verification_level": "standard",
          "quality_gates": ["lint", "test", "typecheck"]
        }
      }
    }
  },

  "artifacts_schema": {
    "required_outputs": [
      "artifacts/modification_requirements.json",
      "artifacts/complexity_assessment.json",
      "artifacts/execution_plan.json",
      "artifacts/change_summary.md",
      "artifacts/quality_gate_results.json",
      "artifacts/pr_description.md",
      "artifacts/workflow_completion_report.json"
    ],
    "validation": {
      "schema_files": [
        ".ai/schemas/workflow.schema.json",
        ".ai/schemas/ai_edit_results.schema.json"
      ]
    }
  },

  "integration_interfaces": {
    "cli_command": "cli-orchestrator run codebase_modification_phase.json --files 'src/**/*.py' --lane 'lane/production/codebase-mod'",
    "programmatic_api": {
      "class": "WorkflowRunner",
      "method": "run_production_modification_phase",
      "parameters": ["modification_spec", "target_files", "save_point_config"]
    },
    "webhook_triggers": {
      "github_push": "auto_execute_on_main_branch",
      "pr_comment": "trigger_with_/modify_command"
    }
  },

  "monitoring_and_observability": {
    "metrics": [
      "operation_completion_rate",
      "average_execution_time",
      "cost_per_modification",
      "quality_gate_pass_rate",
      "rollback_frequency",
      "conflict_resolution_success_rate"
    ],
    "logging": {
      "level": "INFO",
      "format": "structured_json",
      "outputs": ["logs/codebase_modification.jsonl"]
    },
    "alerts": {
      "cost_threshold_breach": "immediate",
      "quality_gate_failure": "immediate",
      "save_point_failure": "urgent"
    }
  }
}