name: OpenAPI Validation

on:
  push:
    branches:
      - main
      - 'ws/**'
    paths:
      - 'src/api/openapi_generator.py'
      - 'specs/openapi/*.yaml'
      - 'specs/openapi/*.json'
      - 'docs/api/openapi.yaml'
  pull_request:
    paths:
      - 'src/api/openapi_generator.py'
      - 'specs/openapi/*.yaml'
      - 'specs/openapi/*.json'
      - 'docs/api/openapi.yaml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  validate-spec:
    runs-on: ubuntu-latest
    name: Validate OpenAPI Specification

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install openapi-spec-validator pyyaml pydantic pydantic-settings

      - name: Regenerate OpenAPI spec
        id: generate
        run: |
          echo "::group::Generating OpenAPI Specification"
          python src/api/openapi_generator.py
          echo "::endgroup::"

      - name: Validate generated YAML spec
        id: validate_yaml
        run: |
          echo "::group::Validating YAML Specification"
          if [ -f specs/openapi/cli-orchestrator-api.yaml ]; then
            openapi-spec-validator specs/openapi/cli-orchestrator-api.yaml
            echo "✅ YAML spec is valid"
          else
            echo "::error::YAML spec not found"
            exit 1
          fi
          echo "::endgroup::"

      - name: Validate generated JSON spec
        id: validate_json
        run: |
          echo "::group::Validating JSON Specification"
          if [ -f specs/openapi/cli-orchestrator-api.json ]; then
            openapi-spec-validator specs/openapi/cli-orchestrator-api.json
            echo "✅ JSON spec is valid"
          else
            echo "::error::JSON spec not found"
            exit 1
          fi
          echo "::endgroup::"

      - name: Validate existing docs spec
        if: hashFiles('docs/api/openapi.yaml') != ''
        run: |
          echo "::group::Validating docs/api/openapi.yaml"
          openapi-spec-validator docs/api/openapi.yaml
          echo "✅ Docs OpenAPI spec is valid"
          echo "::endgroup::"

      - name: Check for spec changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain specs/openapi/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "OpenAPI spec has uncommitted changes"
            git diff specs/openapi/
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to OpenAPI spec"
          fi

      - name: Lint OpenAPI spec with Spectral
        continue-on-error: true
        run: |
          echo "::group::Linting with Spectral"
          npx @stoplight/spectral-cli lint specs/openapi/cli-orchestrator-api.yaml \
            --format stylish \
            --verbose || echo "::warning::Spectral linting found issues"
          echo "::endgroup::"

      - name: Generate spec summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # OpenAPI Validation Summary

          ## Validation Results
          EOF

          if [ "${{ steps.validate_yaml.outcome }}" == "success" ]; then
            echo "- ✅ YAML specification is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ YAML specification validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.validate_json.outcome }}" == "success" ]; then
            echo "- ✅ JSON specification is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ JSON specification validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Specification Details" >> $GITHUB_STEP_SUMMARY

          if [ -f specs/openapi/cli-orchestrator-api.yaml ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### API Version" >> $GITHUB_STEP_SUMMARY
            VERSION=$(python -c "import yaml; print(yaml.safe_load(open('specs/openapi/cli-orchestrator-api.yaml'))['info']['version'])")
            echo "Version: **$VERSION**" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Endpoints" >> $GITHUB_STEP_SUMMARY
            PATHS=$(python -c "import yaml; print(len(yaml.safe_load(open('specs/openapi/cli-orchestrator-api.yaml'))['paths']))")
            echo "Total endpoints: **$PATHS**" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Schemas" >> $GITHUB_STEP_SUMMARY
            SCHEMAS=$(python -c "import yaml; print(len(yaml.safe_load(open('specs/openapi/cli-orchestrator-api.yaml'))['components']['schemas']))")
            echo "Total schemas: **$SCHEMAS**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit generated specs (on push)
        if: |
          github.event_name == 'push' &&
          steps.changes.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add specs/openapi/
          git commit -m "chore(api): regenerate OpenAPI specification

          Auto-generated from src/api/openapi_generator.py

          [skip ci]"
          git push

      - name: Post PR comment
        if: |
          github.event_name == 'pull_request' &&
          steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 📋 OpenAPI Specification Update

            The OpenAPI specification has been regenerated and requires committing.

            ### Action Required
            \`\`\`bash
            # Regenerate and commit the spec
            python src/api/openapi_generator.py
            git add specs/openapi/
            git commit -m "chore(api): regenerate OpenAPI specification"
            git push
            \`\`\`

            ### Validation Status
            - ✅ YAML specification is valid
            - ✅ JSON specification is valid

            ### Viewing the Spec
            \`\`\`bash
            # Using Swagger UI
            npx @redocly/cli preview-docs specs/openapi/cli-orchestrator-api.yaml
            \`\`\`

            Or view online: [Swagger Editor](https://editor.swagger.io/)
            `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('OpenAPI Specification Update')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Fail if spec changes not committed on PR
        if: |
          github.event_name == 'pull_request' &&
          steps.changes.outputs.has_changes == 'true'
        run: |
          echo "::error::OpenAPI specification has uncommitted changes. Please regenerate and commit."
          exit 1

      - name: Upload spec artifacts
        uses: actions/upload-artifact@v5
        with:
          name: openapi-specifications
          path: |
            specs/openapi/*.yaml
            specs/openapi/*.json
          retention-days: 90

  swagger-ui-preview:
    runs-on: ubuntu-latest
    needs: validate-spec
    if: github.event_name == 'pull_request'
    name: Generate Swagger UI Preview

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download spec artifacts
        uses: actions/download-artifact@v4
        with:
          name: openapi-specifications
          path: specs/openapi/

      - name: Generate Swagger UI HTML
        run: |
          mkdir -p swagger-ui
          cat > swagger-ui/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>CLI Orchestrator API - Swagger UI</title>
            <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css" />
          </head>
          <body>
            <div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
            <script>
              window.onload = () => {
                SwaggerUIBundle({
                  url: '../specs/openapi/cli-orchestrator-api.yaml',
                  dom_id: '#swagger-ui',
                  deepLinking: true,
                  presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIBundle.SwaggerUIStandalonePreset
                  ],
                });
              };
            </script>
          </body>
          </html>
          EOF

      - name: Upload Swagger UI
        uses: actions/upload-artifact@v5
        with:
          name: swagger-ui-preview
          path: swagger-ui/
          retention-days: 30
