#!/usr/bin/env pwsh
#Requires -Version 7.0

<#
.SYNOPSIS
    Automated rollback script for reverting bad merges
.DESCRIPTION
    Creates rollback branches, reverts commits, clears rerere cache, and optionally
    updates merge policy with exceptions
.PARAMETER Ref
    Git commit SHA or ref to revert
.PARAMETER UpdatePolicy
    Add policy exception to prevent similar issues
.PARAMETER ClearRerere
    Clear rerere cache entries for this conflict
.PARAMETER Verbose
    Enable verbose output
.EXAMPLE
    .\Rollback.ps1 -Ref abc123def
.EXAMPLE
    .\Rollback.ps1 -Ref HEAD~1 -UpdatePolicy -ClearRerere -Verbose
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$Ref,

    [switch]$UpdatePolicy,

    [switch]$ClearRerere = $true
)

$ErrorActionPreference = 'Stop'
# Note: -Verbose is a built-in common parameter, no need to declare it

# Initialize audit record
$audit = @{
    timestamp = (Get-Date).ToUniversalTime().ToString('o')
    event_type = "rollback"
    run_id = "rollback-$(Get-Date -Format 'yyyyMMddHHmmss')"
    ref_reverted = $Ref
    branch_source = ""
    branch_target = "main"
    policy_version = ""
    outcome = "unknown"
    artifacts = @()
    errors = @()
}

function Write-AuditLog {
    param($Record, $Path)
    $jsonLine = $Record | ConvertTo-Json -Depth 10 -Compress
    Add-Content -Path $Path -Value $jsonLine -Encoding UTF8
}

Write-Host "`nüîÑ Automated Rollback - Revert Bad Merge" -ForegroundColor Cyan
Write-Host ("=" * 60) -ForegroundColor Gray

# Step 1: Validate ref exists
Write-Host "`nüìç Step 1: Validate commit ref..." -ForegroundColor Cyan
try {
    $commitSha = git rev-parse --short $Ref 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Invalid ref: $Ref"
        $audit.outcome = "failed"
        $audit.errors += "Invalid ref"
        exit 1
    }

    $commitMsg = git log -1 --pretty=format:"%s" $commitSha
    Write-Host "‚úÖ Found commit: $commitSha" -ForegroundColor Green
    Write-Host "   Message: $commitMsg" -ForegroundColor Gray

    $audit.ref_reverted = $commitSha

} catch {
    Write-Error "‚ùå Failed to validate ref: $_"
    $audit.outcome = "failed"
    $audit.errors += "Validation error: $_"
    exit 1
}

# Step 2: Confirm rollback
Write-Host "`n‚ö†Ô∏è WARNING: This will revert commit $commitSha" -ForegroundColor Yellow
Write-Host "   Message: $commitMsg" -ForegroundColor Gray
Write-Host ""
$response = Read-Host "Continue with rollback? (yes/N)"

if ($response -ne 'yes' -and $response -ne 'YES') {
    Write-Host "‚ùå Rollback cancelled by user" -ForegroundColor Red
    exit 0
}

# Step 3: Ensure on main branch
Write-Host "`nüåø Step 2: Check current branch..." -ForegroundColor Cyan
$currentBranch = git branch --show-current
$audit.branch_source = "main" # Rollbacks happen from main

if ($currentBranch -ne "main") {
    Write-Warning "‚ö†Ô∏è Not on main branch (currently on: $currentBranch)"
    $response = Read-Host "Switch to main? (y/N)"

    if ($response -eq 'y' -or $response -eq 'Y') {
        try {
            git checkout main
            git pull origin main
            Write-Host "‚úÖ Switched to main and pulled latest" -ForegroundColor Green
        } catch {
            Write-Error "‚ùå Failed to switch to main: $_"
            $audit.outcome = "failed"
            $audit.errors += "Branch switch failed"
            exit 1
        }
    } else {
        Write-Host "‚ùå Rollback cancelled - must be on main branch" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ On main branch" -ForegroundColor Green
    try {
        git pull origin main --quiet
        Write-Host "‚úÖ Pulled latest from main" -ForegroundColor Green
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to pull latest main (continuing anyway)"
    }
}

# Step 4: Create rollback branch
Write-Host "`nüåø Step 3: Create rollback branch..." -ForegroundColor Cyan
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$rollbackBranch = "rollback/$timestamp"
$audit.branch_source = $rollbackBranch

try {
    git switch -c $rollbackBranch
    Write-Host "‚úÖ Created rollback branch: $rollbackBranch" -ForegroundColor Green
} catch {
    Write-Error "‚ùå Failed to create rollback branch: $_"
    $audit.outcome = "failed"
    $audit.errors += "Branch creation failed"
    exit 1
}

# Step 5: Perform revert
Write-Host "`nüîÑ Step 4: Reverting commit..." -ForegroundColor Cyan
try {
    $revertMsg = @"
revert: Rollback bad merge from $commitSha

This rollback reverts commit $commitSha to restore system stability.

Original commit message: $commitMsg

Rollback generated at: $(Get-Date -Format 'o')
Generated by: scripts/Rollback.ps1
Ref: $Ref

Co-Authored-By: Rollback-Bot <noreply@cli-orchestrator.com>
"@

    git revert --no-edit $commitSha

    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Revert successful" -ForegroundColor Green

        # Update commit message with detailed info
        git commit --amend -m $revertMsg

    } else {
        Write-Error "‚ùå Revert failed - conflicts may need manual resolution"
        $audit.outcome = "failed"
        $audit.errors += "Revert had conflicts"

        # Show conflict files
        $conflicts = git diff --name-only --diff-filter=U
        if ($conflicts) {
            Write-Host "`nConflicting files:" -ForegroundColor Yellow
            $conflicts | ForEach-Object { Write-Host "  ‚Ä¢ $_" -ForegroundColor Gray }
            Write-Host "`nResolve conflicts manually, then run:" -ForegroundColor Yellow
            Write-Host "  git add ." -ForegroundColor White
            Write-Host "  git revert --continue" -ForegroundColor White
        }

        exit 1
    }
} catch {
    Write-Error "‚ùå Revert error: $_"
    $audit.outcome = "failed"
    $audit.errors += "Revert error: $_"
    exit 1
}

# Step 6: Clear rerere cache
if ($ClearRerere) {
    Write-Host "`nüóëÔ∏è Step 5: Clear rerere cache..." -ForegroundColor Cyan
    try {
        $rereachePath = ".git/rr-cache"
        if (Test-Path $rereachePath) {
            # Get files modified in the reverted commit
            $changedFiles = git diff-tree --no-commit-id --name-only -r $commitSha

            Write-Host "   Clearing rerere entries for $($changedFiles.Count) files..." -ForegroundColor Gray

            # Clear entire rerere cache (conservative approach)
            # In production, you might want to selectively clear only affected files
            Remove-Item -Path "$rereachePath/*" -Recurse -Force -ErrorAction SilentlyContinue

            Write-Host "‚úÖ Rerere cache cleared" -ForegroundColor Green
            $audit.artifacts += "rerere-cache-cleared"
        } else {
            Write-Host "‚ö†Ô∏è No rerere cache found" -ForegroundColor Yellow
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to clear rerere cache: $_"
        $audit.errors += "Rerere clear failed: $_"
    }
}

# Step 7: Update policy (optional)
if ($UpdatePolicy) {
    Write-Host "`nüìã Step 6: Update merge policy..." -ForegroundColor Cyan
    try {
        if (-not (Test-Path ".merge-policy.yaml")) {
            Write-Warning "‚ö†Ô∏è .merge-policy.yaml not found - skipping policy update"
        } else {
            # Get files affected by the reverted commit
            $affectedFiles = git diff-tree --no-commit-id --name-only -r $commitSha

            # Create policy exception comment
            $policyException = @"

# Rollback Exception - Added $(Get-Date -Format 'yyyy-MM-dd')
# Reverted commit: $commitSha
# Reason: Bad merge detected and rolled back
# Affected files: $($affectedFiles.Count)
# TODO: Review these patterns and add specific path_strategies if needed
# Files: $(($affectedFiles | Select-Object -First 5) -join ', ')...

"@

            Add-Content -Path ".merge-policy.yaml" -Value $policyException
            Write-Host "‚úÖ Added policy exception note" -ForegroundColor Green
            Write-Host "   Review .merge-policy.yaml and add specific rules as needed" -ForegroundColor Gray

            $audit.artifacts += ".merge-policy.yaml-updated"
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to update policy: $_"
        $audit.errors += "Policy update failed: $_"
    }
}

# Step 8: Write audit log
Write-Host "`nüìù Step 7: Write audit log..." -ForegroundColor Cyan
$audit.outcome = "rolled_back"

$auditDir = ".runs/audit"
if (-not (Test-Path $auditDir)) {
    New-Item -ItemType Directory -Path $auditDir -Force | Out-Null
}

$auditFile = "$auditDir/rollback-$timestamp.jsonl"
Write-AuditLog $audit $auditFile
Write-Host "‚úÖ Audit log written: $auditFile" -ForegroundColor Green

# Step 9: Summary and next steps
Write-Host "`n" + ("=" * 60) -ForegroundColor Gray
Write-Host "‚úÖ Rollback Complete" -ForegroundColor Green
Write-Host ("=" * 60) -ForegroundColor Gray
Write-Host "Reverted commit: $commitSha" -ForegroundColor Gray
Write-Host "Rollback branch: $rollbackBranch" -ForegroundColor Gray
Write-Host "Rerere cache: $(if ($ClearRerere) { 'Cleared' } else { 'Kept' })" -ForegroundColor Gray
Write-Host "Policy updated: $(if ($UpdatePolicy) { 'Yes' } else { 'No' })" -ForegroundColor Gray
Write-Host ""

Write-Host "üìã Next steps:" -ForegroundColor Yellow
Write-Host "  1. Review the rollback changes:" -ForegroundColor Gray
Write-Host "     git log -1 --stat" -ForegroundColor White
Write-Host ""
Write-Host "  2. Test the rollback (if needed):" -ForegroundColor Gray
Write-Host "     # Run tests, verify functionality" -ForegroundColor White
Write-Host ""
Write-Host "  3. Push rollback branch:" -ForegroundColor Gray
Write-Host "     git push -u origin $rollbackBranch" -ForegroundColor White
Write-Host ""
Write-Host "  4. Create PR for rollback:" -ForegroundColor Gray
Write-Host "     gh pr create --base main --head $rollbackBranch --fill" -ForegroundColor White
Write-Host ""
Write-Host "  5. OR merge directly (if urgent):" -ForegroundColor Gray
Write-Host "     git checkout main" -ForegroundColor White
Write-Host "     git merge $rollbackBranch" -ForegroundColor White
Write-Host "     git push origin main" -ForegroundColor White
Write-Host ""

if ($UpdatePolicy) {
    Write-Host "  6. Review policy exceptions in .merge-policy.yaml" -ForegroundColor Gray
    Write-Host "     Add specific path_strategies to prevent recurrence" -ForegroundColor White
    Write-Host ""
}

Write-Host "‚úÖ Rollback completed successfully!" -ForegroundColor Green
exit 0
