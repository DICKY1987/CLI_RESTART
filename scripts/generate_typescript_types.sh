#!/usr/bin/env bash
set -euo pipefail

# Generate TypeScript interfaces from JSON schemas for VS Code extension
# Uses json-schema-to-typescript to convert .ai/schemas/*.json to TypeScript

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
SCHEMAS_DIR="$ROOT_DIR/.ai/schemas"
OUTPUT_DIR="$ROOT_DIR/tools/vscode-extension/src/types/generated"
INDEX_FILE="$OUTPUT_DIR/index.ts"

echo "🔧 Generating TypeScript types from JSON schemas..."
echo "   Schemas: $SCHEMAS_DIR"
echo "   Output:  $OUTPUT_DIR"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

# Check if json-schema-to-typescript is available
if ! command -v json2ts &> /dev/null; then
    echo "⚠️  json-schema-to-typescript not found, installing locally..."
    cd "$ROOT_DIR/tools/vscode-extension"
    npm install --save-dev json-schema-to-typescript
    cd "$ROOT_DIR"
fi

# Generate TypeScript interfaces for each schema
generated_count=0
failed_count=0

# Start fresh index file
cat > "$INDEX_FILE" << 'EOF'
/**
 * Auto-generated TypeScript interfaces from JSON schemas
 * DO NOT EDIT MANUALLY - Generated by scripts/generate_typescript_types.sh
 *
 * To regenerate:
 *   npm run generate:types
 *   or: bash scripts/generate_typescript_types.sh
 */

EOF

for schema_file in "$SCHEMAS_DIR"/*.json; do
    if [ ! -f "$schema_file" ]; then
        continue
    fi

    filename=$(basename "$schema_file")
    basename_no_ext="${filename%.json}"
    # Convert schema names to PascalCase for TypeScript (e.g., workflow.schema.json -> Workflow)
    type_name=$(echo "$basename_no_ext" | sed 's/\.schema$//' | sed 's/_\([a-z]\)/\U\1/g' | sed 's/^\([a-z]\)/\U\1/')
    output_file="$OUTPUT_DIR/${basename_no_ext}.ts"

    echo "   Generating: $filename -> ${basename_no_ext}.ts"

    # Use npx to run json-schema-to-typescript
    if npx json-schema-to-typescript "$schema_file" > "$output_file" 2>/dev/null; then
        generated_count=$((generated_count + 1))
        # Add export to index file
        echo "export * from './${basename_no_ext}';" >> "$INDEX_FILE"
    else
        echo "   ⚠️  Failed to generate types for $filename"
        failed_count=$((failed_count + 1))
        # Remove failed output file if it exists
        [ -f "$output_file" ] && rm "$output_file"
    fi
done

# Add summary comment to index
cat >> "$INDEX_FILE" << EOF

/**
 * Generation summary:
 * - Successfully generated: $generated_count schemas
 * - Failed: $failed_count schemas
 * - Last generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
 */
EOF

echo ""
echo "✅ TypeScript generation complete!"
echo "   Generated: $generated_count files"
if [ $failed_count -gt 0 ]; then
    echo "   Failed:    $failed_count files"
fi
echo "   Index:     $INDEX_FILE"

# Format generated files if prettier is available
if command -v prettier &> /dev/null || [ -f "$ROOT_DIR/tools/vscode-extension/node_modules/.bin/prettier" ]; then
    echo ""
    echo "🎨 Formatting generated files with prettier..."
    cd "$ROOT_DIR/tools/vscode-extension"
    if [ -f "node_modules/.bin/prettier" ]; then
        npx prettier --write "src/types/generated/*.ts" 2>/dev/null || true
    fi
fi

echo ""
echo "Done! TypeScript types are ready in:"
echo "   $OUTPUT_DIR"
