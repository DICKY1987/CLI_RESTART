import * as vscode from 'vscode';\nimport { WebSocketClient } from './webSocketClient';\nimport { WorkflowCockpitPanel } from './workflowCockpitPanel';\nimport { WorkflowTreeProvider } from './workflowTreeProvider';\nimport { ApiClient } from './apiClient';\n\nlet workflowTreeProvider: WorkflowTreeProvider;\nlet webSocketClient: WebSocketClient;\nlet apiClient: ApiClient;\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('CLI Multi-Rapid extension is now active!');\n\n\t// Initialize API client\n\tconst config = vscode.workspace.getConfiguration('cliMultiRapid');\n\tconst serverUrl = config.get<string>('serverUrl', 'http://localhost:8000');\n\tconst apiKey = config.get<string>('apiKey', '');\n\tapiClient = new ApiClient(serverUrl, apiKey);\n\n\t// Initialize WebSocket client\n\twebSocketClient = new WebSocketClient(serverUrl.replace('http', 'ws') + '/ws');\n\n\t// Initialize workflow tree provider\n\tworkflowTreeProvider = new WorkflowTreeProvider(apiClient);\n\tvscode.window.registerTreeDataProvider('cliMultiRapidWorkflows', workflowTreeProvider);\n\n\t// Register commands\n\tconst commands = [\n\t\tvscode.commands.registerCommand('cliMultiRapid.openCockpit', openCockpit),\n\t\tvscode.commands.registerCommand('cliMultiRapid.startWorkflow', startWorkflow),\n\t\tvscode.commands.registerCommand('cliMultiRapid.cancelWorkflow', cancelWorkflow),\n\t\tvscode.commands.registerCommand('cliMultiRapid.retryPhase', retryPhase),\n\t\tvscode.commands.registerCommand('cliMultiRapid.increaseBudget', increaseBudget),\n\t\tvscode.commands.registerCommand('cliMultiRapid.viewLogs', viewLogs),\n\t\tvscode.commands.registerCommand('cliMultiRapid.exportReport', exportReport),\n\t\tvscode.commands.registerCommand('cliMultiRapid.refreshWorkflows', () => workflowTreeProvider.refresh())\n\t];\n\n\tcommands.forEach(cmd => context.subscriptions.push(cmd));\n\n\t// Set up WebSocket event handlers\n\tsetupWebSocketHandlers();\n\n\t// Auto-refresh if enabled\n\tconst autoRefresh = config.get<boolean>('autoRefresh', true);\n\tif (autoRefresh) {\n\t\tconst interval = config.get<number>('refreshInterval', 2000);\n\t\tsetInterval(() => {\n\t\t\tworkflowTreeProvider.refresh();\n\t\t}, interval);\n\t}\n\n\t// Status bar item\n\tconst statusBarItem = vscode.window.createStatusBarItem(\n\t\tvscode.StatusBarAlignment.Left, \n\t\t100\n\t);\n\tstatusBarItem.text = \"$(gear) CLI Multi-Rapid\";\n\tstatusBarItem.command = 'cliMultiRapid.openCockpit';\n\tstatusBarItem.tooltip = 'Open CLI Multi-Rapid Workflow Cockpit';\n\tstatusBarItem.show();\n\tcontext.subscriptions.push(statusBarItem);\n}\n\nfunction setupWebSocketHandlers() {\n\twebSocketClient.on('workflow_started', (data: any) => {\n\t\tvscode.window.showInformationMessage(\n\t\t\t`Workflow started: ${data.workflow_name || data.workflow_id}`\n\t\t);\n\t\tworkflowTreeProvider.refresh();\n\t\tvscode.commands.executeCommand('setContext', 'cliMultiRapid.workflowActive', true);\n\t});\n\n\twebSocketClient.on('workflow_progress', (data: any) => {\n\t\t// Update progress in tree view\n\t\tworkflowTreeProvider.updateWorkflowProgress(data.workflow_id, data);\n\t});\n\n\twebSocketClient.on('workflow_completed', (data: any) => {\n\t\tvscode.window.showInformationMessage(\n\t\t\t`Workflow completed: ${data.workflow_id} (${data.duration_seconds}s)`\n\t\t);\n\t\tworkflowTreeProvider.refresh();\n\t\tvscode.commands.executeCommand('setContext', 'cliMultiRapid.workflowActive', false);\n\t});\n\n\twebSocketClient.on('workflow_failed', (data: any) => {\n\t\tvscode.window.showErrorMessage(\n\t\t\t`Workflow failed: ${data.workflow_id} - ${data.error_message || 'Unknown error'}`\n\t\t);\n\t\tworkflowTreeProvider.refresh();\n\t\tvscode.commands.executeCommand('setContext', 'cliMultiRapid.hasFailedPhases', true);\n\t});\n\n\twebSocketClient.on('phase_started', (data: any) => {\n\t\tconsole.log(`Phase started: ${data.phase_name}`);\n\t});\n\n\twebSocketClient.on('phase_completed', (data: any) => {\n\t\tconsole.log(`Phase completed: ${data.phase_name} (${data.duration_seconds}s)`);\n\t});\n\n\twebSocketClient.on('phase_failed', (data: any) => {\n\t\tvscode.window.showWarningMessage(\n\t\t\t`Phase failed: ${data.phase_name} - ${data.error_message}`\n\t\t);\n\t});\n\n\twebSocketClient.on('cost_alert', (data: any) => {\n\t\tconst config = vscode.workspace.getConfiguration('cliMultiRapid');\n\t\tif (config.get<boolean>('showCostAlerts', true)) {\n\t\t\tvscode.window.showWarningMessage(\n\t\t\t\t`Cost Alert: ${data.service} - $${data.current_cost}/${data.budget_limit} (${data.usage_percent}%)`\n\t\t\t);\n\t\t}\n\t});\n}\n\nasync function openCockpit() {\n\ttry {\n\t\tWorkflowCockpitPanel.createOrShow(\n\t\t\tvscode.ExtensionContext.prototype,\n\t\t\tapiClient,\n\t\t\twebSocketClient\n\t\t);\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to open cockpit: ${error}`);\n\t}\n}\n\nasync function startWorkflow() {\n\ttry {\n\t\t// Get current editor selection for context\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tlet context = '';\n\t\tlet filePath = '';\n\t\t\n\t\tif (editor) {\n\t\t\tfilePath = editor.document.fileName;\n\t\t\tconst selection = editor.selection;\n\t\t\tif (!selection.isEmpty) {\n\t\t\t\tcontext = editor.document.getText(selection);\n\t\t\t}\n\t\t}\n\n\t\t// Prompt user for workflow description\n\t\tconst description = await vscode.window.showInputBox({\n\t\t\tprompt: 'Describe the workflow task',\n\t\t\tplaceHolder: 'e.g., Refactor this function to use async/await',\n\t\t\tvalue: context ? `Refactor selected code in ${filePath}` : ''\n\t\t});\n\n\t\tif (!description) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get budget limit\n\t\tconst config = vscode.workspace.getConfiguration('cliMultiRapid');\n\t\tconst maxBudget = config.get<number>('maxBudgetPerWorkflow', 10.0);\n\n\t\t// Start workflow\n\t\tconst result = await apiClient.startWorkflow({\n\t\t\tdescription,\n\t\t\tmax_cost: maxBudget,\n\t\t\tcontext: {\n\t\t\t\tfile_path: filePath,\n\t\t\t\tselection: context,\n\t\t\t\tworkspace_root: vscode.workspace.rootPath\n\t\t\t}\n\t\t});\n\n\t\tvscode.window.showInformationMessage(\n\t\t\t`Workflow started: ${result.task_id} (estimated cost: $${result.estimated_cost})`\n\t\t);\n\t\t\n\t\t// Refresh tree view\n\t\tworkflowTreeProvider.refresh();\n\t\t\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to start workflow: ${error}`);\n\t}\n}\n\nasync function cancelWorkflow() {\n\ttry {\n\t\t// Get active workflows and let user choose\n\t\tconst workflows = await apiClient.getActiveWorkflows();\n\t\t\n\t\tif (workflows.length === 0) {\n\t\t\tvscode.window.showInformationMessage('No active workflows to cancel');\n\t\t\treturn;\n\t\t}\n\n\t\tconst workflowItems = workflows.map(w => ({\n\t\t\tlabel: w.description || w.task_id,\n\t\t\tdescription: `Started: ${new Date(w.start_time).toLocaleTimeString()}`,\n\t\t\tdetail: `Cost: $${w.current_cost} | Status: ${w.status}`,\n\t\t\tworkflow: w\n\t\t}));\n\n\t\tconst selected = await vscode.window.showQuickPick(workflowItems, {\n\t\t\tplaceHolder: 'Select workflow to cancel'\n\t\t});\n\n\t\tif (selected) {\n\t\t\tawait apiClient.cancelWorkflow(selected.workflow.task_id);\n\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t`Workflow cancelled: ${selected.workflow.task_id}`\n\t\t\t);\n\t\t\tworkflowTreeProvider.refresh();\n\t\t}\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to cancel workflow: ${error}`);\n\t}\n}\n\nasync function retryPhase() {\n\ttry {\n\t\t// Get failed phases and let user choose\n\t\tconst failedPhases = await apiClient.getFailedPhases();\n\t\t\n\t\tif (failedPhases.length === 0) {\n\t\t\tvscode.window.showInformationMessage('No failed phases to retry');\n\t\t\treturn;\n\t\t}\n\n\t\tconst phaseItems = failedPhases.map(p => ({\n\t\t\tlabel: p.phase_name,\n\t\t\tdescription: `Workflow: ${p.workflow_id}`,\n\t\t\tdetail: `Error: ${p.error_message}`,\n\t\t\tphase: p\n\t\t}));\n\n\t\tconst selected = await vscode.window.showQuickPick(phaseItems, {\n\t\t\tplaceHolder: 'Select phase to retry'\n\t\t});\n\n\t\tif (selected) {\n\t\t\tawait apiClient.retryPhase(selected.phase.workflow_id, selected.phase.phase_id);\n\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t`Phase retry initiated: ${selected.phase.phase_name}`\n\t\t\t);\n\t\t\tworkflowTreeProvider.refresh();\n\t\t}\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to retry phase: ${error}`);\n\t}\n}\n\nasync function increaseBudget() {\n\ttry {\n\t\t// Get active workflows\n\t\tconst workflows = await apiClient.getActiveWorkflows();\n\t\t\n\t\tif (workflows.length === 0) {\n\t\t\tvscode.window.showInformationMessage('No active workflows');\n\t\t\treturn;\n\t\t}\n\n\t\t// Select workflow\n\t\tconst workflowItems = workflows.map(w => ({\n\t\t\tlabel: w.description || w.task_id,\n\t\t\tdescription: `Current budget: $${w.budget_limit} | Used: $${w.current_cost}`,\n\t\t\tworkflow: w\n\t\t}));\n\n\t\tconst selectedWorkflow = await vscode.window.showQuickPick(workflowItems, {\n\t\t\tplaceHolder: 'Select workflow to increase budget'\n\t\t});\n\n\t\tif (!selectedWorkflow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get new budget amount\n\t\tconst newBudgetStr = await vscode.window.showInputBox({\n\t\t\tprompt: `Enter new budget limit (current: $${selectedWorkflow.workflow.budget_limit})`,\n\t\t\tplaceHolder: '25.00',\n\t\t\tvalidateInput: (value) => {\n\t\t\t\tconst num = parseFloat(value);\n\t\t\t\tif (isNaN(num) || num <= selectedWorkflow.workflow.budget_limit) {\n\t\t\t\t\treturn 'Please enter a number greater than current budget';\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\tif (newBudgetStr) {\n\t\t\tconst newBudget = parseFloat(newBudgetStr);\n\t\t\tawait apiClient.updateWorkflowBudget(selectedWorkflow.workflow.task_id, newBudget);\n\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t`Budget increased to $${newBudget} for workflow ${selectedWorkflow.workflow.task_id}`\n\t\t\t);\n\t\t\tworkflowTreeProvider.refresh();\n\t\t}\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to increase budget: ${error}`);\n\t}\n}\n\nasync function viewLogs() {\n\ttry {\n\t\t// Open logs in new document\n\t\tconst logs = await apiClient.getRecentLogs();\n\t\tconst doc = await vscode.workspace.openTextDocument({\n\t\t\tcontent: logs.join('\\n'),\n\t\t\tlanguage: 'log'\n\t\t});\n\t\tvscode.window.showTextDocument(doc);\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to view logs: ${error}`);\n\t}\n}\n\nasync function exportReport() {\n\ttry {\n\t\t// Get completed workflows\n\t\tconst workflows = await apiClient.getCompletedWorkflows();\n\t\t\n\t\tif (workflows.length === 0) {\n\t\t\tvscode.window.showInformationMessage('No completed workflows to export');\n\t\t\treturn;\n\t\t}\n\n\t\t// Select workflow\n\t\tconst workflowItems = workflows.map(w => ({\n\t\t\tlabel: w.description || w.task_id,\n\t\t\tdescription: `Completed: ${new Date(w.end_time).toLocaleDateString()}`,\n\t\t\tdetail: `Duration: ${w.duration_seconds}s | Cost: $${w.total_cost}`,\n\t\t\tworkflow: w\n\t\t}));\n\n\t\tconst selected = await vscode.window.showQuickPick(workflowItems, {\n\t\t\tplaceHolder: 'Select workflow to export'\n\t\t});\n\n\t\tif (selected) {\n\t\t\tconst report = await apiClient.exportWorkflowReport(selected.workflow.task_id);\n\t\t\t\n\t\t\t// Save to file\n\t\t\tconst uri = await vscode.window.showSaveDialog({\n\t\t\t\tdefaultUri: vscode.Uri.file(`workflow-report-${selected.workflow.task_id}.json`),\n\t\t\t\tfilters: {\n\t\t\t\t\t'JSON Files': ['json'],\n\t\t\t\t\t'All Files': ['*']\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (uri) {\n\t\t\t\tawait vscode.workspace.fs.writeFile(uri, Buffer.from(JSON.stringify(report, null, 2)));\n\t\t\t\tvscode.window.showInformationMessage(\n\t\t\t\t\t`Report exported: ${uri.fsPath}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to export report: ${error}`);\n\t}\n}\n\nexport function deactivate() {\n\tif (webSocketClient) {\n\t\twebSocketClient.disconnect();\n\t}\n}\n"