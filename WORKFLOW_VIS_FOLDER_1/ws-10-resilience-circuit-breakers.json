{
  "workstream_id": 10,
  "workstream_name": "Resilience & Circuit Breakers",
  "branch_name": "ws/10-resilience-circuit-breakers",
  "est_hours": "44h",
  "earliest_start_phase": "Phase 3 / Week 9",
  "blocked_by": ["Determinism Core"],
  "priority_note": "High severity - Critical for production reliability. Fault isolation prevents cascading failures.",

  "objectives": [
    "Integrate circuit breakers into all external adapter calls",
    "Implement configurable retry strategies with exponential backoff and jitter",
    "Integrate dead letter queue for failed operations",
    "Establish resilience patterns as standard practice"
  ],

  "code_changes_summary": "This workstream implements resilience patterns for production reliability. It wraps all external adapter calls in circuit breakers to prevent cascading failures, implements configurable retry strategies with exponential backoff and jitter, integrates the DLQ for persistent failures, and establishes circuit state monitoring. These patterns enable graceful degradation under failure conditions.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Integrate circuit breaker into adapter execution",
      "gap_ids": ["gap_DETERM_004"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/resilience/circuit_breaker.py",
        "src/cli_multi_rapid/adapters/base_adapter.py",
        "src/cli_multi_rapid/monitoring/circuit_state.py",
        "config/circuit_breaker_config.json"
      ],
      "acceptance_criteria": [
        "All external adapter calls wrapped in circuit breaker",
        "Circuit states: closed, open, half-open",
        "Circuit opens after threshold failures",
        "Circuit auto-recovers after timeout",
        "Circuit state exposed via metrics",
        "Circuit configuration per adapter type"
      ],
      "test_plan": [
        "Execute adapter that calls external service",
        "Simulate service failures",
        "Verify circuit opens after threshold",
        "Wait for timeout, verify half-open state",
        "Verify successful call closes circuit",
        "Check circuit state metrics"
      ]
    },
    {
      "id": "task-002",
      "description": "Implement configurable retry strategies",
      "gap_ids": ["gap_DETERM_006"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/resilience/retry_strategy.py",
        "src/cli_multi_rapid/decorators/retry.py",
        "config/retry_policies.json"
      ],
      "acceptance_criteria": [
        "@retry decorator with configurable strategies created",
        "Exponential backoff strategy implemented",
        "Jitter support to prevent thundering herd",
        "Max retries configurable per operation",
        "Retry policies defined per adapter",
        "Retry metrics tracked (attempts, successes, failures)"
      ],
      "test_plan": [
        "Apply @retry to test function",
        "Simulate transient failures",
        "Verify exponential backoff occurs",
        "Verify jitter adds randomness",
        "Verify max retries respected",
        "Check retry metrics"
      ]
    },
    {
      "id": "task-003",
      "description": "Integrate dead letter queue for failed operations",
      "gap_ids": ["gap_DETERM_007"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/resilience/dlq.py",
        "src/cli_multi_rapid/workflow_runner.py",
        "src/cli_multi_rapid/commands/dlq_commands.py"
      ],
      "acceptance_criteria": [
        "DLQ integrated into workflow execution",
        "Failed operations automatically sent to DLQ",
        "cli-orchestrator dlq list shows DLQ items",
        "cli-orchestrator dlq retry <id> retries operation",
        "cli-orchestrator dlq inspect <id> shows details",
        "DLQ persistence (survives restarts)"
      ],
      "test_plan": [
        "Execute workflow with operation that fails persistently",
        "Verify operation sent to DLQ after max retries",
        "Run cli-orchestrator dlq list",
        "Verify failed operation shown",
        "Fix underlying issue",
        "Run cli-orchestrator dlq retry <id>",
        "Verify operation succeeds on retry"
      ]
    },
    {
      "id": "task-004",
      "description": "Add resilience monitoring and alerting",
      "gap_ids": ["gap_DETERM_004", "gap_DETERM_006", "gap_DETERM_007"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/monitoring/resilience_metrics.py",
        "config/alerting_rules.json",
        "docs/operations/resilience-monitoring.md"
      ],
      "acceptance_criteria": [
        "Circuit breaker state metrics exposed",
        "Retry attempt metrics exposed",
        "DLQ size metrics exposed",
        "Alerting rules defined for unhealthy states",
        "Monitoring dashboard configuration created",
        "Runbook for handling circuit failures"
      ],
      "test_plan": [
        "Trigger circuit breaker opening",
        "Check metrics endpoint, verify circuit state exposed",
        "Trigger DLQ growth",
        "Verify alerting rules fire",
        "Review monitoring dashboard",
        "Follow runbook to resolve issue"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/10-resilience-circuit-breakers origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"feat(resilience): add circuit breakers, retry strategies, and DLQ\"",
      "git push -u origin ws/10-resilience-circuit-breakers"
    ],
    "commit_message_template": "feat(resilience): add circuit breakers, retry strategies, and DLQ\n\nIntegrate circuit breakers into adapter execution, implement configurable retry\nstrategies with exponential backoff, and integrate DLQ for failed operations.\n\nCloses: gap_DETERM_004, gap_DETERM_006, gap_DETERM_007\nWorkstream: WS-10"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify WS-08 completed (determinism core)",
      "verify resilience module dependencies installed"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Start only after WS-08 complete.",
    "Do not prompt for approval; execute automatically.",
    "This workstream blocks WS-11 (self-healing).",
    "Circuit breaker integration critical for production stability."
  ]
}
