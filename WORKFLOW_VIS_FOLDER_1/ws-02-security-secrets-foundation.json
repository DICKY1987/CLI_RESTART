{
  "workstream_id": 2,
  "workstream_name": "Security & Secrets Foundation",
  "branch_name": "ws/02-security-secrets-foundation",
  "est_hours": "52h",
  "earliest_start_phase": "Phase 1 / Day 1",
  "blocked_by": [],
  "priority_note": "High severity - Production blocker. Secrets management and security scanning are prerequisites for safe deployment.",

  "objectives": [
    "Implement secure secrets management system with encryption",
    "Add automated dependency vulnerability scanning to CI",
    "Establish immutable audit logging with retention policy",
    "Configure license compliance checking in CI pipeline"
  ],

  "code_changes_summary": "This workstream establishes security foundations by integrating secrets management (supporting HashiCorp Vault, AWS Secrets Manager, Azure Key Vault), adding Dependabot and Safety scanning for dependencies, implementing tamper-proof audit log retention, and automating license compliance checks. These capabilities are essential for production deployment and regulatory compliance.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Implement secrets management adapter with multiple backend support",
      "gap_ids": ["gap_CROSS_003"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/security/secrets_manager.py",
        "src/cli_multi_rapid/adapters/secrets_adapter.py",
        "config/secrets.schema.json",
        "docs/operations/secrets-management.md"
      ],
      "acceptance_criteria": [
        "Secrets adapter supports environment variables (fallback)",
        "Secrets adapter supports HashiCorp Vault integration",
        "Secrets adapter supports AWS Secrets Manager",
        "Secrets adapter supports Azure Key Vault",
        "Secrets encrypted at rest and in transit",
        "Configuration system updated to use secrets adapter",
        "No secrets hardcoded in codebase"
      ],
      "test_plan": [
        "Configure secrets adapter with env var backend",
        "Verify secrets retrieved correctly",
        "Mock Vault/AWS/Azure backends and test integration",
        "Scan codebase for hardcoded secrets (gitleaks)",
        "Verify all config loading uses secrets adapter"
      ]
    },
    {
      "id": "task-002",
      "description": "Configure Dependabot and Safety for dependency vulnerability scanning",
      "gap_ids": ["gap_QUALITY_004"],
      "files_to_create_or_modify": [
        ".github/dependabot.yml",
        ".github/workflows/security-scan.yml",
        ".safety-policy.yml"
      ],
      "acceptance_criteria": [
        "Dependabot configured for Python dependencies",
        "Dependabot configured for GitHub Actions",
        "Dependabot configured for Docker images",
        "Safety integrated into CI pipeline",
        "Security scan runs on every PR",
        "Vulnerable dependencies block merge",
        "Security advisories create GitHub issues automatically"
      ],
      "test_plan": [
        "Create PR with outdated dependency",
        "Verify Dependabot detects and creates update PR",
        "Add known vulnerable package",
        "Verify Safety fails CI check with details",
        "Check Security tab shows vulnerability findings"
      ]
    },
    {
      "id": "task-003",
      "description": "Implement immutable audit log with retention policy",
      "gap_ids": ["gap_OBS_007"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/security/audit.py",
        "config/audit_retention_policy.json",
        "scripts/audit_log_archival.py",
        "docs/compliance/audit-logging.md"
      ],
      "acceptance_criteria": [
        "Audit logs are append-only (immutable)",
        "Audit logs include who-did-what-when for all operations",
        "Retention policy defined (90 days active, 7 years archive)",
        "Automated archival to S3/Azure Blob/GCS",
        "Audit log tampering detection implemented",
        "Compliance export functionality (JSON/CSV)",
        "PII redaction for privacy compliance"
      ],
      "test_plan": [
        "Execute operations and verify audit log entries created",
        "Attempt to modify audit log file, verify detection",
        "Run archival script, verify old logs moved to archive",
        "Export audit report and verify format",
        "Verify PII is redacted from logs"
      ]
    },
    {
      "id": "task-004",
      "description": "Add automated license compliance checking",
      "gap_ids": ["gap_CROSS_007"],
      "files_to_create_or_modify": [
        ".github/workflows/license-check.yml",
        "config/license_allowlist.txt",
        "scripts/check_licenses.py"
      ],
      "acceptance_criteria": [
        "License scanner runs in CI (pip-licenses)",
        "Allowlist defined for acceptable licenses (MIT, Apache-2.0, BSD)",
        "GPL/AGPL licenses blocked automatically",
        "License violations fail CI with clear message",
        "License report generated in artifacts"
      ],
      "test_plan": [
        "Run license checker on current dependencies",
        "Verify all licenses are compliant",
        "Add dependency with GPL license",
        "Verify CI fails with license violation message",
        "Check artifact contains license report"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/02-security-secrets-foundation origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"security: implement secrets management, vulnerability scanning, and audit logging\"",
      "git push -u origin ws/02-security-secrets-foundation"
    ],
    "commit_message_template": "security: implement secrets management, vulnerability scanning, and audit logging\n\nAdd secrets management adapter with multi-backend support, Dependabot/Safety\nvulnerability scanning, immutable audit logging with retention, and license compliance.\n\nCloses: gap_CROSS_003, gap_QUALITY_004, gap_OBS_007, gap_CROSS_007\nWorkstream: WS-02"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify pip-licenses and safety installed",
      "verify GitHub token has security permissions",
      "no blockers in 'blocked_by' (empty for this workstream)"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Phase 1 foundational work.",
    "Do not prompt for approval; execute automatically.",
    "Secrets adapter should gracefully degrade to env vars if vault unavailable.",
    "This workstream blocks WS-05, WS-19 (database operations need secrets).",
    "Complete before handling any production secrets or deployments."
  ]
}
