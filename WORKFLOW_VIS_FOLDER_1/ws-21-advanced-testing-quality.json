{
  "workstream_id": 21,
  "workstream_name": "Advanced Testing & Quality",
  "branch_name": "ws/21-advanced-testing-quality",
  "est_hours": "56h",
  "earliest_start_phase": "Phase 3 / Week 18",
  "blocked_by": ["Core Testing Infrastructure"],
  "priority_note": "Medium priority - Advanced quality assurance and performance validation.",

  "objectives": [
    "Audit and consolidate CI/CD pipeline",
    "Implement performance benchmarking with regression detection",
    "Add mutation testing to validate test quality",
    "Establish comprehensive quality gates"
  ],

  "code_changes_summary": "This workstream advances quality assurance with CI pipeline consolidation to eliminate redundancy, performance benchmarking to track regression, and mutation testing to validate test effectiveness beyond coverage metrics.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Audit and consolidate CI/CD pipeline",
      "gap_ids": ["gap_QUALITY_003"],
      "files_to_create_or_modify": [
        "docs/ci-cd/pipeline-architecture.md",
        ".github/workflows/unified-ci.yml",
        "scripts/audit_workflows.py"
      ],
      "acceptance_criteria": [
        "CI workflow audit identifies redundancies",
        "Redundant workflows consolidated",
        "Pipeline dependency graph documented",
        "Clear stages: validate → test → build → deploy",
        "No gaps in pipeline coverage"
      ],
      "test_plan": [
        "Run pipeline audit script",
        "Review redundancy report",
        "Consolidate workflows",
        "Test unified pipeline on PR",
        "Verify all checks still pass"
      ]
    },
    {
      "id": "task-002",
      "description": "Implement performance benchmarking",
      "gap_ids": ["gap_QUALITY_005"],
      "files_to_create_or_modify": [
        "tests/performance/benchmarks.py",
        "tests/performance/conftest.py",
        ".github/workflows/performance-benchmarks.yml",
        "docs/performance/benchmark-results.md"
      ],
      "acceptance_criteria": [
        "pytest-benchmark suite implemented",
        "Benchmarks for critical paths (workflow execution, schema validation)",
        "Baseline performance metrics established",
        "Regression detection in CI",
        "Performance trends tracked over time"
      ],
      "test_plan": [
        "Run pytest tests/performance/ --benchmark-only",
        "Review benchmark results",
        "Establish baseline",
        "Introduce performance regression",
        "Verify CI detects regression"
      ]
    },
    {
      "id": "task-003",
      "description": "Add mutation testing",
      "gap_ids": ["gap_QUALITY_008"],
      "files_to_create_or_modify": [
        ".mutmut-config",
        ".github/workflows/mutation-testing.yml",
        "docs/testing/mutation-testing-guide.md"
      ],
      "acceptance_criteria": [
        "Mutmut configured for critical modules",
        "Mutation testing runs weekly in CI",
        "Mutation score tracked (target ≥80%)",
        "Surviving mutants analyzed",
        "Test improvements from mutation findings"
      ],
      "test_plan": [
        "Run mutmut run",
        "Review mutation report",
        "Identify surviving mutants",
        "Improve tests to kill mutants",
        "Re-run, verify score improves"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/21-advanced-testing-quality origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"test: add CI consolidation, performance benchmarks, and mutation testing\"",
      "git push -u origin ws/21-advanced-testing-quality"
    ],
    "commit_message_template": "test: add CI consolidation, performance benchmarks, and mutation testing\n\nConsolidate CI pipeline, implement performance benchmarking with regression\ndetection, and add mutation testing.\n\nCloses: gap_QUALITY_003, gap_QUALITY_005, gap_QUALITY_008\nWorkstream: WS-21"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify WS-03 completed (core testing)",
      "verify pytest-benchmark and mutmut installed"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Start only after WS-03 complete.",
    "Do not prompt for approval; execute automatically.",
    "Mutation testing provides deeper quality insights than coverage."
  ]
}
