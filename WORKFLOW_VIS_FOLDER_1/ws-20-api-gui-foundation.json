{
  "workstream_id": 20,
  "workstream_name": "API & GUI Foundation",
  "branch_name": "ws/20-api-gui-foundation",
  "est_hours": "56h",
  "earliest_start_phase": "Phase 3 / Week 17",
  "blocked_by": ["Schema CI/CD Integration", "Observability Core"],
  "priority_note": "Medium priority - Establishes foundations for web access and IDE integration.",

  "objectives": [
    "Implement API versioning strategy",
    "Integrate GUI terminal with CLI orchestrator",
    "Create multi-channel notification system",
    "Enable non-CLI access to orchestrator"
  ],

  "code_changes_summary": "This workstream establishes foundations for alternative interfaces to the orchestrator including API versioning for stable integrations, GUI terminal integration for visual users, and multi-channel notifications for workflow completion/failure alerts.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Implement API versioning",
      "gap_ids": ["gap_ARCH_003"],
      "files_to_create_or_modify": [
        "src/api/versioning.py",
        "src/api/v1/__init__.py",
        "src/api/v2/__init__.py",
        "docs/api/versioning-policy.md"
      ],
      "acceptance_criteria": [
        "URL-based API versioning (/api/v1/, /api/v2/)",
        "Version routing implemented",
        "Deprecation policy documented",
        "Backward compatibility maintained",
        "Version migration guide available"
      ],
      "test_plan": [
        "Call /api/v1/workflows endpoint",
        "Call /api/v2/workflows endpoint",
        "Verify both versions respond correctly",
        "Deprecate v1 endpoint",
        "Verify deprecation warning in response"
      ]
    },
    {
      "id": "task-002",
      "description": "Integrate GUI terminal with orchestrator",
      "gap_ids": ["gap_GUI_001"],
      "files_to_create_or_modify": [
        "CLI_PY_GUI/gui_terminal/orchestrator_bridge.py",
        "src/cli_multi_rapid/commands/gui.py",
        "docs/user-guide/gui-terminal.md"
      ],
      "acceptance_criteria": [
        "Bridge connects GUI terminal to WorkflowRunner",
        "cli-orchestrator gui launches terminal interface",
        "Workflows executable from GUI",
        "Workflow status visible in GUI",
        "GUI and CLI share same backend"
      ],
      "test_plan": [
        "Run cli-orchestrator gui",
        "Verify GUI terminal launches",
        "Execute workflow from GUI",
        "Verify workflow runs",
        "Check status updates in GUI"
      ]
    },
    {
      "id": "task-003",
      "description": "Implement multi-channel notification system",
      "gap_ids": ["gap_GUI_004"],
      "files_to_create_or_modify": [
        "src/notifications/notification_service.py",
        "src/notifications/channels/email.py",
        "src/notifications/channels/slack.py",
        "src/notifications/channels/webhook.py",
        "config/notifications.json"
      ],
      "acceptance_criteria": [
        "Notification service with pluggable channels",
        "Email notifications configured",
        "Slack notifications configured",
        "Webhook notifications for custom integrations",
        "Notifications triggered on workflow completion/failure",
        "Notification preferences configurable per user"
      ],
      "test_plan": [
        "Configure email channel",
        "Execute workflow",
        "Verify email sent on completion",
        "Configure Slack channel",
        "Execute workflow",
        "Verify Slack message sent"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/20-api-gui-foundation origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"feat(api,gui): add API versioning, GUI integration, and notifications\"",
      "git push -u origin ws/20-api-gui-foundation"
    ],
    "commit_message_template": "feat(api,gui): add API versioning, GUI integration, and notifications\n\nImplement API versioning strategy, integrate GUI terminal with orchestrator,\nand create multi-channel notification system.\n\nCloses: gap_ARCH_003, gap_GUI_001, gap_GUI_004\nWorkstream: WS-20"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify WS-05 completed (schema CI/CD)",
      "verify WS-09 completed (observability core)"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Start only after WS-05 and WS-09 complete.",
    "Do not prompt for approval; execute automatically.",
    "GUI integration improves accessibility."
  ]
}
