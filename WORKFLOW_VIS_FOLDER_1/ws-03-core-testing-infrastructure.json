{
  "workstream_id": 3,
  "workstream_name": "Core Testing Infrastructure",
  "branch_name": "ws/03-core-testing-infrastructure",
  "est_hours": "56h",
  "earliest_start_phase": "Phase 1 / Day 1",
  "blocked_by": [],
  "priority_note": "High severity - Quality foundation. Must achieve ≥85% test coverage and establish isolated integration testing.",

  "objectives": [
    "Achieve ≥85% test coverage across all core modules",
    "Implement isolated integration tests with proper setup/teardown",
    "Add coverage enforcement to CI pipeline",
    "Establish testing best practices and patterns"
  ],

  "code_changes_summary": "This workstream establishes comprehensive testing infrastructure by writing missing unit tests to achieve 85% coverage, implementing isolated integration tests with fixtures for database and resource cleanup, adding pytest-cov to CI with coverage enforcement, and documenting testing patterns. This quality foundation ensures reliable refactoring and prevents regressions.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Write unit tests to achieve 85% coverage target",
      "gap_ids": ["gap_QUALITY_001"],
      "files_to_create_or_modify": [
        "tests/adapters/test_all_adapters.py",
        "tests/coordination/test_workflow_coordination.py",
        "tests/validation/test_schema_validation.py",
        "tests/resilience/test_circuit_breaker.py",
        "tests/logging/test_activity_logger.py",
        ".coveragerc",
        "pyproject.toml"
      ],
      "acceptance_criteria": [
        "Overall test coverage ≥85%",
        "Critical paths have ≥95% coverage",
        "All adapters have unit tests",
        "All public APIs tested",
        "Coverage report generated in CI",
        "Coverage drops block PRs"
      ],
      "test_plan": [
        "Run pytest with coverage: pytest --cov=src --cov-report=html",
        "Review coverage report, identify gaps",
        "Write tests for uncovered code",
        "Re-run coverage, verify ≥85%",
        "Create PR dropping coverage, verify CI fails"
      ]
    },
    {
      "id": "task-002",
      "description": "Implement isolated integration tests with fixtures",
      "gap_ids": ["gap_QUALITY_002"],
      "files_to_create_or_modify": [
        "tests/integration/conftest.py",
        "tests/integration/test_workflow_execution.py",
        "tests/integration/test_adapter_integration.py",
        "tests/integration/fixtures/database.py",
        "tests/integration/fixtures/temp_repos.py"
      ],
      "acceptance_criteria": [
        "Integration tests use pytest fixtures for isolation",
        "Each test has setup that creates fresh test environment",
        "Each test has teardown that cleans up resources",
        "Tests can run in parallel without interference",
        "Test databases are separate from development databases",
        "Temporary files/repos cleaned up automatically"
      ],
      "test_plan": [
        "Run integration tests: pytest tests/integration/ -v",
        "Verify tests create isolated environments",
        "Run tests in parallel: pytest tests/integration/ -n 4",
        "Verify no test failures due to resource conflicts",
        "Inspect system after test run, verify cleanup occurred"
      ]
    },
    {
      "id": "task-003",
      "description": "Add coverage enforcement to CI pipeline",
      "gap_ids": ["gap_QUALITY_001"],
      "files_to_create_or_modify": [
        ".github/workflows/tests.yml",
        ".github/workflows/pr-coverage-check.yml"
      ],
      "acceptance_criteria": [
        "Coverage calculated on every PR",
        "PRs that drop coverage below 85% fail",
        "Coverage report posted as PR comment",
        "Coverage badge in README.md",
        "Coverage trends tracked over time"
      ],
      "test_plan": [
        "Create PR with well-tested code, verify passes",
        "Create PR with untested code dropping coverage, verify fails",
        "Check PR comments for coverage report",
        "Verify README badge shows current coverage"
      ]
    },
    {
      "id": "task-004",
      "description": "Document testing patterns and best practices",
      "gap_ids": ["gap_QUALITY_001", "gap_QUALITY_002"],
      "files_to_create_or_modify": [
        "docs/development/testing-guide.md",
        "tests/README.md",
        "tests/examples/test_example_adapter.py"
      ],
      "acceptance_criteria": [
        "Testing guide documents unit test patterns",
        "Testing guide documents integration test patterns",
        "Testing guide documents fixture usage",
        "Example test files demonstrate best practices",
        "Guide linked from main CONTRIBUTING.md"
      ],
      "test_plan": [
        "Review testing guide for completeness",
        "Follow guide to write new test",
        "Verify guide is accurate and helpful",
        "Get feedback from developer perspective"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/03-core-testing-infrastructure origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"test: implement comprehensive test infrastructure with 85% coverage\"",
      "git push -u origin ws/03-core-testing-infrastructure"
    ],
    "commit_message_template": "test: implement comprehensive test infrastructure with 85% coverage\n\nAdd unit and integration tests achieving 85% coverage, implement test isolation\nfixtures, add coverage enforcement to CI, and document testing patterns.\n\nCloses: gap_QUALITY_001, gap_QUALITY_002\nWorkstream: WS-03"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify pytest, pytest-cov, pytest-asyncio installed",
      "verify sufficient disk space for test artifacts",
      "no blockers in 'blocked_by' (empty for this workstream)"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Phase 1 foundational work.",
    "Do not prompt for approval; execute automatically.",
    "This workstream blocks WS-17, WS-21 (advanced testing builds on this).",
    "Writing 40h of tests will take significant time; break into smaller commits.",
    "Focus on high-value tests for critical paths first."
  ]
}
