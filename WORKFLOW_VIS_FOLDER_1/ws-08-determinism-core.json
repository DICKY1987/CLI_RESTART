{
  "workstream_id": 8,
  "workstream_name": "Determinism Core",
  "branch_name": "ws/08-determinism-core",
  "est_hours": "44h",
  "earliest_start_phase": "Phase 2 / Week 7",
  "blocked_by": ["Schema Runtime Enforcement & Contract Validation"],
  "priority_note": "High severity - Core system promise. Deterministic execution is fundamental to reliability.",

  "objectives": [
    "Integrate deterministic engine into router and workflow execution",
    "Implement systematic idempotency enforcement for all adapters",
    "Ensure all operations are safely repeatable",
    "Establish determinism as core architectural guarantee"
  ],

  "code_changes_summary": "This workstream implements determinism as a core system guarantee. It integrates the deterministic_engine.py into the router for enforcement, implements idempotency middleware ensuring all adapter operations are safely repeatable via idempotency keys, and establishes determinism validation in CI. This is fundamental to the system's reliability promise.",

  "tasks": [
    {
      "id": "task-001",
      "description": "Integrate deterministic engine into router",
      "gap_ids": ["gap_DETERM_001"],
      "files_to_create_or_modify": [
        "src/cli_multi_rapid/deterministic_engine.py",
        "src/cli_multi_rapid/router.py",
        "src/cli_multi_rapid/workflow_runner.py"
      ],
      "acceptance_criteria": [
        "Deterministic engine loaded on router initialization",
        "Router enforces determinism guarantees on step execution",
        "Non-deterministic operations detected and flagged",
        "Determinism violations logged with full context",
        "Determinism mode configurable (strict/warn)"
      ],
      "test_plan": [
        "Execute workflow with deterministic steps",
        "Verify execution is deterministic (same inputs = same outputs)",
        "Add non-deterministic operation (random, timestamp)",
        "Verify engine detects and flags/blocks operation",
        "Check logs for determinism violation details"
      ]
    },
    {
      "id": "task-002",
      "description": "Implement idempotency middleware for adapters",
      "gap_ids": ["gap_DETERM_002"],
      "files_to_create_or_modify": [
        "src/idempotency/idempotency_manager.py",
        "src/cli_multi_rapid/adapters/base_adapter.py",
        "src/idempotency/key_generator.py",
        "src/idempotency/state_store.py"
      ],
      "acceptance_criteria": [
        "Idempotency key system implemented",
        "BaseAdapter wrapped with idempotency middleware",
        "Duplicate operations with same key return cached result",
        "Idempotency state persisted (database or file)",
        "TTL configured for idempotency cache",
        "Idempotency can be bypassed with force flag"
      ],
      "test_plan": [
        "Execute adapter operation with idempotency key",
        "Execute same operation again",
        "Verify second execution returns cached result (no re-execution)",
        "Modify input slightly",
        "Verify new execution occurs (different key)",
        "Test with force flag, verify bypass works"
      ]
    },
    {
      "id": "task-003",
      "description": "Add determinism validation tests",
      "gap_ids": ["gap_DETERM_001", "gap_DETERM_002"],
      "files_to_create_or_modify": [
        "tests/determinism/test_deterministic_engine.py",
        "tests/determinism/test_idempotency.py",
        "tests/adapters/test_adapter_idempotency.py"
      ],
      "acceptance_criteria": [
        "Tests verify deterministic behavior of all adapters",
        "Tests verify idempotency of all adapter operations",
        "Tests verify same inputs produce same outputs",
        "Tests verify non-deterministic operations detected",
        "Tests achieve ≥95% coverage of determinism code"
      ],
      "test_plan": [
        "Run pytest tests/determinism/ -v",
        "Verify all adapters tested for determinism",
        "Verify idempotency tests pass",
        "Run coverage report",
        "Verify ≥95% coverage of determinism modules"
      ]
    },
    {
      "id": "task-004",
      "description": "Document determinism guarantees and usage",
      "gap_ids": ["gap_DETERM_001", "gap_DETERM_002"],
      "files_to_create_or_modify": [
        "docs/architecture/determinism.md",
        "docs/development/idempotency-guide.md",
        "CLAUDE.md"
      ],
      "acceptance_criteria": [
        "Determinism architecture documented",
        "Idempotency usage guide for adapter developers",
        "Examples of deterministic vs non-deterministic operations",
        "Troubleshooting guide for determinism violations",
        "Documentation linked from main architecture docs"
      ],
      "test_plan": [
        "Read determinism documentation as new developer",
        "Follow idempotency guide to create idempotent adapter",
        "Verify documentation is clear and complete",
        "Test examples in documentation"
      ]
    }
  ],

  "git": {
    "repo_url": "https://github.com/DICKY1987/CLI_RESTART.git",
    "remote": "origin",
    "base_branch": "main",
    "auto_commit_and_push": true,
    "commands": [
      "git fetch origin",
      "git checkout -B ws/08-determinism-core origin/main",
      "apply code changes (programmatic)",
      "git add -A",
      "git commit -m \"feat(core): integrate deterministic engine and idempotency middleware\"",
      "git push -u origin ws/08-determinism-core"
    ],
    "commit_message_template": "feat(core): integrate deterministic engine and idempotency middleware\n\nImplement deterministic execution enforcement in router, idempotency middleware\nfor all adapters, and comprehensive determinism validation.\n\nCloses: gap_DETERM_001, gap_DETERM_002\nWorkstream: WS-08"
  },

  "safety_and_rollback": {
    "idempotent_reentry": true,
    "preflight_checks": [
      "ensure clean working tree",
      "sync with origin/main",
      "verify WS-01 completed (schema enforcement)",
      "verify idempotency state storage available"
    ],
    "rollback_plan": [
      "git reset --hard origin/main",
      "git clean -fd",
      "if pushed, create revert PR"
    ]
  },

  "execution_notes": [
    "Single-developer constraint: Start only after WS-01 complete.",
    "Do not prompt for approval; execute automatically.",
    "This workstream blocks WS-10 (resilience), WS-12 (parallel orchestration).",
    "Determinism is a core architectural principle - thorough testing critical."
  ]
}
