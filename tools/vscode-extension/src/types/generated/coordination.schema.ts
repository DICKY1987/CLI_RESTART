/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema for validating multi-agent workflow coordination plans and execution artifacts
 */
export interface MultiAgentCoordinationSchema {
  /**
   * Unique identifier for coordination session
   */
  coordination_id: string;
  /**
   * Coordination session creation timestamp
   */
  timestamp: string;
  /**
   * Workflows participating in coordination
   *
   * @minItems 1
   */
  workflows: [
    {
      /**
       * Unique workflow identifier
       */
      workflow_id: string;
      /**
       * Git branch for workflow execution
       */
      branch?: string;
      /**
       * File scope claims for this workflow
       */
      file_claims?: {
        /**
         * File patterns claimed by workflow
         *
         * @minItems 1
         */
        patterns: [string, ...string[]];
        /**
         * Access mode for file patterns
         */
        mode: "exclusive" | "shared" | "read-only";
        /**
         * Claim priority (higher = more important)
         */
        priority?: number;
        [k: string]: unknown;
      }[];
      /**
       * Current workflow status
       */
      status:
        | "planning"
        | "executing"
        | "verifying"
        | "ready"
        | "merged"
        | "failed"
        | "cancelled";
      /**
       * Tokens/cost consumed by workflow
       */
      cost_used?: number;
      /**
       * Allocated budget for workflow
       */
      cost_budget?: number;
      /**
       * Workflow execution start time
       */
      start_time?: string;
      /**
       * Workflow execution end time
       */
      end_time?: string;
      /**
       * Artifacts produced by workflow
       */
      artifacts?: string[];
      /**
       * Error message if workflow failed
       */
      error?: string;
      [k: string]: unknown;
    },
    ...{
      /**
       * Unique workflow identifier
       */
      workflow_id: string;
      /**
       * Git branch for workflow execution
       */
      branch?: string;
      /**
       * File scope claims for this workflow
       */
      file_claims?: {
        /**
         * File patterns claimed by workflow
         *
         * @minItems 1
         */
        patterns: [string, ...string[]];
        /**
         * Access mode for file patterns
         */
        mode: "exclusive" | "shared" | "read-only";
        /**
         * Claim priority (higher = more important)
         */
        priority?: number;
        [k: string]: unknown;
      }[];
      /**
       * Current workflow status
       */
      status:
        | "planning"
        | "executing"
        | "verifying"
        | "ready"
        | "merged"
        | "failed"
        | "cancelled";
      /**
       * Tokens/cost consumed by workflow
       */
      cost_used?: number;
      /**
       * Allocated budget for workflow
       */
      cost_budget?: number;
      /**
       * Workflow execution start time
       */
      start_time?: string;
      /**
       * Workflow execution end time
       */
      end_time?: string;
      /**
       * Artifacts produced by workflow
       */
      artifacts?: string[];
      /**
       * Error message if workflow failed
       */
      error?: string;
      [k: string]: unknown;
    }[],
  ];
  /**
   * Detected conflicts between workflows
   */
  conflicts?: {
    /**
     * Workflows involved in conflict
     *
     * @minItems 2
     */
    workflow_ids: [string, string, ...string[]];
    /**
     * Type of conflict detected
     */
    conflict_type: "file_scope" | "resource" | "dependency" | "priority";
    /**
     * File patterns causing conflict
     */
    conflicting_patterns?: string[];
    /**
     * Resolution strategy for conflict
     */
    resolution?: "queue" | "reject" | "manual" | "priority_override";
    /**
     * Detailed conflict description
     */
    details?: string;
    [k: string]: unknown;
  }[];
  /**
   * Coordinated execution plan
   */
  execution_plan?: {
    /**
     * Sequential execution order of workflows
     */
    execution_order?: string[];
    /**
     * Groups of workflows that can run in parallel
     */
    parallel_groups?: [string, ...string[]][];
    /**
     * Workflow dependency graph
     */
    dependency_graph?: {
      nodes?: {
        /**
         * Node identifier
         */
        id: string;
        /**
         * Associated workflow ID
         */
        workflow_id: string;
        /**
         * Associated phase ID (for IPT-WT)
         */
        phase_id?: string;
        /**
         * Dependencies of this node
         */
        dependencies?: string[];
        /**
         * Whether this node can start without waiting
         */
        can_start_immediately?: boolean;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Merge queue configuration and status
   */
  merge_queue?: {
    /**
     * Whether merge queue is enabled
     */
    enabled?: boolean;
    /**
     * Items in merge queue
     */
    queue?: {
      /**
       * Git branch to merge
       */
      branch: string;
      /**
       * Associated workflow identifier
       */
      workflow_id: string;
      /**
       * Merge priority (higher = earlier)
       */
      priority?: number;
      /**
       * Status of merge queue item
       */
      status:
        | "queued"
        | "verifying"
        | "ready"
        | "merging"
        | "merged"
        | "failed"
        | "conflict"
        | "cancelled";
      /**
       * Required verification level
       */
      verification_level?: "minimal" | "standard" | "comprehensive";
      /**
       * Quality gates to run before merge
       */
      quality_gates?: (
        | "lint"
        | "test"
        | "typecheck"
        | "security"
        | "coverage"
        | "performance"
      )[];
      /**
       * Number of merge attempts
       */
      attempts?: number;
      /**
       * Maximum merge attempts allowed
       */
      max_attempts?: number;
      /**
       * Error message if merge failed
       */
      error?: string;
      /**
       * Queue item creation time
       */
      created_at?: string;
      /**
       * Last update time
       */
      updated_at?: string;
      /**
       * Commit hash after successful merge
       */
      merge_commit?: string;
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  /**
   * Resource allocation plan
   */
  resource_allocation?: {
    /**
     * Task assignments to adapters
     */
    assignments?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z0-9_-]+$".
       */
      [k: string]: {
        /**
         * Assigned adapter name
         */
        adapter: string;
        /**
         * Type of assigned adapter
         */
        adapter_type?: "deterministic" | "ai";
        /**
         * Estimated execution cost
         */
        estimated_cost: number;
        /**
         * Execution priority
         */
        priority?: number;
        /**
         * Associated workflow ID
         */
        workflow?: string;
        /**
         * Associated phase ID
         */
        phase?: string;
        [k: string]: unknown;
      };
    };
    /**
     * Total estimated cost for all tasks
     */
    total_estimated_cost?: number;
    /**
     * Estimated cost in USD
     */
    estimated_usd_cost?: number;
    /**
     * Whether allocation is within budget
     */
    within_budget?: boolean;
    [k: string]: unknown;
  };
  /**
   * Real-time execution metrics
   */
  execution_metrics?: {
    /**
     * Number of currently executing workflows
     */
    active_workflows?: number;
    /**
     * Number of completed workflows
     */
    completed_workflows?: number;
    /**
     * Number of failed workflows
     */
    failed_workflows?: number;
    /**
     * Total cost consumed so far
     */
    total_cost_used?: number;
    /**
     * Budget utilization percentage (0-1)
     */
    budget_utilization?: number;
    /**
     * Estimated coordination completion time
     */
    estimated_completion_time?: string;
    /**
     * Parallelization efficiency (0-1)
     */
    parallel_efficiency?: number;
    /**
     * Average task execution time in seconds
     */
    average_task_duration?: number;
    [k: string]: unknown;
  };
  /**
   * Quality metrics from coordination execution
   */
  quality_metrics?: {
    /**
     * Whether all quality gates passed
     */
    all_tests_passed?: boolean;
    /**
     * Number of security issues detected
     */
    security_issues_found?: number;
    /**
     * Change in code coverage percentage
     */
    code_coverage_delta?: number;
    /**
     * Number of linting violations
     */
    lint_violations?: number;
    /**
     * Number of type checking errors
     */
    typecheck_errors?: number;
    [k: string]: unknown;
  };
  /**
   * Overall coordination session status
   */
  coordination_status?:
    | "planning"
    | "executing"
    | "verifying"
    | "merging"
    | "completed"
    | "failed";
  /**
   * Coordination session start time
   */
  start_time?: string;
  /**
   * Coordination session end time
   */
  end_time?: string;
  /**
   * Total execution time in seconds
   */
  total_execution_time?: number;
  [k: string]: unknown;
}
